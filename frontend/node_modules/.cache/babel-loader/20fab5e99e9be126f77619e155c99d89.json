{"ast":null,"code":"import _objectSpread from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { latLng } from \"leaflet\";\nimport { LatLng, LMap, LTileLayer, LGeoJson, LMarker, LCircleMarker, LPopup, LControlLayers } from 'vue2-leaflet'; // import 'leaflet/dist/leaflet.css';\n\nimport { mapState } from 'vuex';\nimport * as d3 from 'd3';\nimport EcoUSDA from '../../public/USDA_ecoreg.json';\nimport MAPPING from '../../public/id2lonlat_cleaned.json';\nimport USCounties from '../../public/county_with_ecoregion_borderline.json';\nexport default {\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer,\n    LGeoJson: LGeoJson,\n    LMarker: LMarker,\n    LCircleMarker: LCircleMarker,\n    LPopup: LPopup,\n    LControlLayers: LControlLayers\n  },\n  data: function data() {\n    return {\n      items: ['BestPracticesAndMandates', 'Organization', 'Program', 'Project', 'Total'],\n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      zoom: 4.5,\n      center: [36.967483, -114.357571],\n      geojson: null,\n      geojson_county: null,\n      show_eco: false,\n      circles: null,\n      all_circles: null,\n      show_circle_marker: false,\n      markerLatLng: [39.1014537, -84.5124602],\n      selectedInit: 'Total',\n      markers: null,\n      show_county: false,\n      show_marker: false,\n      tileProviders: [{\n        name: 'OpenStreetMap',\n        visible: true,\n        attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n        url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      }, {\n        name: 'OpenTopoMap',\n        visible: false,\n        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n        attribution: 'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n      }]\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return EcoUSDA;\n\n            case 2:\n              _this.geojson = _context.sent;\n              _context.next = 5;\n              return USCounties.county;\n\n            case 5:\n              _this.geojson_county = _context.sent;\n\n              _this.$store.dispatch(\"load_map\"); // this.show_eco = true\n              // console.log(this.graphData)\n\n\n              if (_this.graphData) {\n                _this.initCircleMarkerWithG();\n              } else {// this.initCircleMarker()\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    changeInitColor: function changeInitColor(val) {\n      this.selectedInit = val;\n    },\n    initCircleMarker: function initCircleMarker() {\n      var _this2 = this;\n\n      if (this.selectedInit == 'Total') {\n        var min = d3.min(this.mapInitialInfo, function (d) {\n          if (d.count_total > 0) return d.count_total;\n        });\n        var max = d3.max(this.mapInitialInfo, function (d) {\n          return +d.count_total;\n        });\n      } else {\n        var min = d3.min(this.mapInitialInfo, function (d) {\n          if (d['count_details'][_this2.selectedInit] > 0) return d['count_details'][_this2.selectedInit];\n        });\n        var max = d3.max(this.mapInitialInfo, function (d) {\n          return +d['count_details'][_this2.selectedInit];\n        });\n      }\n\n      var color_mapping = d3.scaleLinear().domain([min, max]).range(['#ffffb2', '#b10026']);\n      var circles = [];\n      var that = this;\n      this.mapInitialInfo.forEach(function (d, i) {\n        // check if we have this county's lat and long \n        if (d['county_id'] in MAPPING) {\n          if (that.selectedInit == 'Total') {\n            var val = d['count_total'];\n          } else {\n            var val = d['count_details'][that.selectedInit];\n          } // don't want to draw empty county as white, ugly \n\n\n          if (val > 0) {\n            var ele = MAPPING[d['county_id']];\n            var temp = {\n              county_id: d['county_id'],\n              key: i,\n              center: [ele['lat'], ele['long']],\n              radius: 8,\n              opacity: 0.8,\n              stroke: true,\n              content: 'The ' + that.selectedInit + ' of ' + d['county_name'] + ' is:' + val.toString(),\n              color: color_mapping(val)\n            };\n            circles.push(temp);\n          }\n        } else {// console.log('do not have this county lat long:',d['county_id'])\n        }\n      });\n      this.circles = circles;\n      this.all_circles = circles;\n      this.show_circle_marker = true;\n    },\n    updateCircleMarker: function updateCircleMarker() {\n      console.log(this.circles);\n      console.log(this.mapQueryInfo);\n      this.show_circle_marker = false;\n      var valid_county_id = [];\n      this.mapQueryInfo.forEach(function (d) {\n        for (var _i = 0, _Object$entries = Object.entries(d['county']); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              key = _Object$entries$_i[0],\n              value = _Object$entries$_i[1];\n\n          if (valid_county_id.includes(value) == false) {\n            valid_county_id.push(value);\n          }\n        }\n      });\n      var filtered_circles = this.all_circles.filter(function (d) {\n        return valid_county_id.includes(d.county_id);\n      });\n      this.circles = filtered_circles;\n      this.show_circle_marker = true;\n    },\n    updateMarker: function updateMarker() {\n      console.log('i[date', this.mapQueryInfo);\n      var output = [];\n      var c = 0;\n      this.show_marker = false;\n      this.mapQueryInfo.forEach(function (d) {\n        for (var _i2 = 0, _Object$entries2 = Object.entries(d['county']); _i2 < _Object$entries2.length; _i2++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n              key = _Object$entries2$_i[0],\n              value = _Object$entries2$_i[1];\n\n          var ele = MAPPING[value]; // check we have the longtitude latitude for the county\n\n          if (value in MAPPING) {\n            var temp = {\n              key: c,\n              center: [ele['lat'], ele['long']],\n              radius: 8,\n              opacity: 0.8,\n              stroke: true,\n              content: d['node_name'] + ' is located in ' + key,\n              color: 'red'\n            };\n            c += 1;\n            output.push(temp);\n          } else {}\n        }\n      });\n\n      if (output.length == 0) {\n        alert('No relevent county info for brushed nodes!');\n      }\n\n      this.markers = output;\n      this.show_marker = true;\n    },\n    initCircleMarkerWithG: function initCircleMarkerWithG() {\n      var nodes = this.graphData['results'][0]['data'][0]['graph']['nodes'];\n      console.log('initG', nodes);\n      var circles = [];\n      var that = this;\n      nodes.forEach(function (d, i) {});\n    }\n  },\n  computed: _objectSpread({}, mapState(['graphData', 'mapInitialInfo', 'mapQueryInfo', 'mapInQueryStatus', 'activeTab', 'ecoregion', 'DATABASE_NAME'])),\n  watch: {\n    DATABASE_NAME: function DATABASE_NAME() {\n      // console.log(this.DATABASE_NAME, this.mapInitialInfo)\n      if (this.DATABASE_NAME == \"ppod\") {\n        this.items = ['BestPracticesAndMandates', 'Organization', 'Program', 'Project', 'Total'];\n      } else {\n        this.items = ['in_flow', 'out_flow', 'resilience', 'degree', 'degree_in', 'degree_out', 'strength_in', 'strength_out', 'strength', 'betweenness', 'Total'];\n      }\n    },\n    graphData: function graphData() {\n      console.log('graph changed', this.graphData);\n    },\n    mapInitialInfo: function mapInitialInfo() {\n      this.initCircleMarker();\n    },\n    mapQueryInfo: function mapQueryInfo() {\n      this.updateMarker();\n      this.updateCircleMarker(); // this.updateMapColoring()\n    },\n    selectedInit: function selectedInit() {\n      this.initCircleMarker();\n      this.updateCircleMarker();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA,kH,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACAC,cADA;AAEAC,0BAFA;AAGAC,sBAHA;AAIAC,oBAJA;AAKAC,gCALA;AAMAC,kBANA;AAOAC;AAPA,GADA;AAUAC,MAVA,kBAUA;AACA;AACAC,wFADA;AAEAC,+DAFA;AAGAC,mBACA,0FAJA;AAKAC,eALA;AAMAC,sCANA;AAOAC,mBAPA;AAQAC,0BARA;AASAC,qBATA;AAUAC,mBAVA;AAWAC,uBAXA;AAYAC,+BAZA;AAaAC,6CAbA;AAcAC,2BAdA;AAeAC,mBAfA;AAgBAC,wBAhBA;AAiBAC,wBAjBA;AAkBAC,sBACA;AACAC,6BADA;AAEAC,qBAFA;AAGAhB,qBACA,0FAJA;AAKAD;AALA,OADA,EAQA;AACAgB,2BADA;AAEAC,sBAFA;AAGAjB,+DAHA;AAIAC,qBACA;AALA,OARA;AAlBA;AAmCA,GA9CA;AA+CAiB,SA/CA,qBA+CA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEAC,OAFA;;AAAA;AAEA,2BAFA;AAAA;AAAA,qBAGAC,iBAHA;;AAAA;AAGA,kCAHA;;AAIA,gDAJA,CAKA;AACA;;;AACA;AACA;AACA,eAFA,MAEA,CACA;AACA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA,GA3DA;AA4DAC;AACAC,mBADA,2BACAC,GADA,EACA;AACA;AACA,KAHA;AAIAC,oBAJA,8BAIA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA,OAHA,MAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AACA,2CACAC,MADA,CACA,UADA,EAEAC,KAFA,CAEA,sBAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAFA,MAEA;AACA;AACA,WALA,CAMA;;;AACA;AACA;AACA;AACAC,uCADA;AAEAC,oBAFA;AAGAzB,+CAHA;AAIA0B,uBAJA;AAKAC,0BALA;AAMAC,0BANA;AAOAC,uGAPA;AAQAC;AARA;AAUA1B;AACA;AACA,SArBA,MAqBA,CACA;AACA;AACA,OA1BA;AA2BA;AACA;AACA;AACA,KAhDA;AAiDA2B,sBAjDA,gCAiDA;AACAC;AACAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACAC;AACA;AACA;AACA,OANA;AAQA;AAAA;AAAA;AACA;AACA;AAEA,KAlEA;AAmEAC,gBAnEA,0BAmEA;AACAF;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA,mCADA,CAEA;;AACA;AACA;AACAP,oBADA;AAEAzB,+CAFA;AAGA0B,uBAHA;AAIAC,0BAJA;AAKAC,0BALA;AAMAC,+DANA;AAOAC;AAPA;AASAK;AACAC;AACA,WAZA,MAYA,CAEA;AACA;AACA,OApBA;;AAqBA;AACAC;AACA;;AACA;AACA;AAEA,KAnGA;AAoGAC,yBApGA,mCAoGA;AACA;AACAN;AACA;AACA;AACAO,qCAEA,CAFA;AAGA;AA5GA,GA5DA;AA0KAC,8BACAC,wHADA,CA1KA;AA6KAC;AACAC,iBADA,2BACA;AACA;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA,KARA;AASAC,aATA,uBASA;AACAZ;AACA,KAXA;AAYAa,kBAZA,4BAYA;AACA;AACA,KAdA;AAeAC,gBAfA,0BAeA;AACA;AACA,gCAFA,CAGA;AACA,KAnBA;AAoBAtC,gBApBA,0BAoBA;AACA;AACA;AACA;AAvBA;AA7KA","names":["components","LMap","LTileLayer","LGeoJson","LMarker","LCircleMarker","LPopup","LControlLayers","data","items","url","attribution","zoom","center","geojson","geojson_county","show_eco","circles","all_circles","show_circle_marker","markerLatLng","selectedInit","markers","show_county","show_marker","tileProviders","name","visible","created","EcoUSDA","USCounties","methods","changeInitColor","val","initCircleMarker","domain","range","county_id","key","radius","opacity","stroke","content","color","updateCircleMarker","console","valid_county_id","updateMarker","c","output","alert","initCircleMarkerWithG","nodes","computed","mapState","watch","DATABASE_NAME","graphData","mapInitialInfo","mapQueryInfo"],"sourceRoot":"src/components","sources":["Leaflet.vue"],"sourcesContent":["<template>\n    <div id=\"leaflet_div\">\n        <v-row>\n            <v-col cols=6>\n                 <v-switch\n                    style=\"margin-left:20px\"\n                        v-model=\"show_eco\"\n                        :label=\"`Show Eco-Region: ${show_eco.toString()}`\"\n                    ></v-switch>\n            </v-col>\n            <v-col cols=6>\n                 <v-switch\n                    style=\"margin-left:20px\"\n                        v-model=\"show_county\"\n                        :label=\"`Show County: ${show_county.toString()}`\"\n                    ></v-switch>\n            </v-col>\n           \n             <v-col cols=6>\n                  <v-select\n                    :items=\"items\"\n                    @change = \"changeInitColor\"\n                    label=\"Color\"\n                    dense\n                    solo\n                    style=\"z-index:1000\"\n                    ></v-select>\n              </v-col>\n        </v-row>\n        <v-row>\n            <l-map style=\"height: 650px\" :zoom=\"zoom\" :center=\"center\">\n                <!-- <l-tile-layer :url=\"url\" :attribution=\"attribution\"></l-tile-layer> -->\n                <l-control-layers position=\"topright\"></l-control-layers>\n                <l-tile-layer\n                    v-for=\"tileProvider in tileProviders\"\n                    :key=\"tileProvider.name\"\n                    :name=\"tileProvider.name\"\n                    :visible=\"tileProvider.visible\"\n                    :url=\"tileProvider.url\"\n                    :attribution=\"tileProvider.attribution\"\n                    layer-type=\"base\"/>\n                <l-geo-json :geojson=\"geojson\" v-if=\"show_eco\"></l-geo-json>\n                <l-geo-json :geojson=\"geojson_county\" v-if=\"show_county\"></l-geo-json>\n                <l-marker :v-if=\"show_marker\" :lat-lng=\"marker.center\" :opacity=\"marker.opacity\" v-for =\"marker in markers\" :key=\"marker.key\">\n                    <l-popup :content=\"marker.content\"/>\n                </l-marker>\n                <l-circle-marker\n                    :v-if = \"show_circle_marker\"\n                    v-for=\"circle in circles\" :key=\"circle.key\"\n                    :lat-lng=\"circle.center\"\n                    :radius=\"circle.radius\"\n                    :stroke= \"circle.stroke\"\n                    :fillColor=\"circle.color\"\n                    :color = \"circle.color\"\n                    :fillOpacity = \"circle.opacity\">\n                    <l-popup :content=\"circle.content\"/>\n                </l-circle-marker>\n            </l-map>\n          \n        </v-row>\n    </div>\n</template>\n\n<script>\nimport { latLng } from \"leaflet\";\nimport {LatLng, LMap, LTileLayer, LGeoJson,LMarker,LCircleMarker,LPopup,LControlLayers} from 'vue2-leaflet';\n// import 'leaflet/dist/leaflet.css';\nimport {mapState} from 'vuex'\nimport * as d3 from 'd3'\nimport EcoUSDA from '../../public/USDA_ecoreg.json';\nimport MAPPING from '../../public/id2lonlat_cleaned.json';\nimport USCounties from '../../public/county_with_ecoregion_borderline.json';\nexport default {\n  components: {\n    LMap,\n    LTileLayer,\n    LGeoJson,\n    LMarker,\n    LCircleMarker,\n    LPopup,\n    LControlLayers\n  },\n  data () {\n    return {\n      items: ['BestPracticesAndMandates','Organization','Program','Project','Total'],\n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      attribution:\n        '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      zoom: 4.5,\n      center: [36.967483, -114.357571],\n      geojson: null,\n      geojson_county: null,\n      show_eco: false,\n      circles: null,\n      all_circles: null,\n      show_circle_marker: false,\n      markerLatLng: [39.1014537, -84.5124602],\n      selectedInit: 'Total',\n      markers:null,\n      show_county: false,\n      show_marker: false,\n      tileProviders: [\n        {\n          name: 'OpenStreetMap',\n          visible: true,\n          attribution:\n            '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n          url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        },\n        {\n          name: 'OpenTopoMap',\n          visible: false,\n          url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n          attribution:\n            'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        },\n      ],\n    };\n  },\n  async created () {\n    // const response = await fetch('https://rawgit.com/gregoiredavid/france-geojson/master/regions/pays-de-la-loire/communes-pays-de-la-loire.geojson');\n    this.geojson = await EcoUSDA\n    this.geojson_county = await USCounties.county\n    this.$store.dispatch(\"load_map\")\n    // this.show_eco = true\n    // console.log(this.graphData)\n    if(this.graphData){\n        this.initCircleMarkerWithG()\n    }else{\n        // this.initCircleMarker()\n    }\n  },\n  methods:{\n    changeInitColor(val){\n        this.selectedInit = val\n    },\n    initCircleMarker(){\n        if(this.selectedInit=='Total'){\n            var min = d3.min(this.mapInitialInfo, d=> {if(d.count_total>0) return d.count_total})\n            var max = d3.max(this.mapInitialInfo, d=> +d.count_total)\n        }else{\n            var min = d3.min(this.mapInitialInfo, d=> {if(d['count_details'][this.selectedInit]>0) return d['count_details'][this.selectedInit]})\n            var max = d3.max(this.mapInitialInfo, d=> +d['count_details'][this.selectedInit])\n        }\n        var color_mapping = d3.scaleLinear()\n        .domain([min, max])\n        .range(['#ffffb2','#b10026'])\n        \n        var circles = []\n        var that = this\n        this.mapInitialInfo.forEach((d,i)=>{\n            // check if we have this county's lat and long \n            if(d['county_id'] in MAPPING){\n                if(that.selectedInit=='Total'){\n                    var val = d['count_total']\n                }else{\n                    var val = d['count_details'][that.selectedInit]\n                }\n                // don't want to draw empty county as white, ugly \n                if(val>0){\n                    var ele = MAPPING[d['county_id']]\n                    var temp = {\n                        county_id: d['county_id'],\n                        key: i,\n                        center: [ele['lat'],ele['long']],\n                        radius:8,\n                        opacity:0.8,\n                        stroke: true,\n                        content: 'The '+that.selectedInit+' of '+d['county_name']+' is:'+val.toString(),\n                        color: color_mapping(val)\n                    }\n                    circles.push(temp)\n                }\n            } else{\n                // console.log('do not have this county lat long:',d['county_id'])\n            }\n        })\n        this.circles = circles\n        this.all_circles = circles \n        this.show_circle_marker = true\n    },\n    updateCircleMarker(){\n       console.log(this.circles)\n       console.log(this.mapQueryInfo)\n       this.show_circle_marker = false\n       var valid_county_id = []\n       this.mapQueryInfo.forEach(d=>{\n          for (let [key, value] of Object.entries(d['county'])){\n            if(valid_county_id.includes(value)==false){\n              valid_county_id.push(value)\n            }\n          }\n       })\n\n       const filtered_circles = this.all_circles.filter(d => valid_county_id.includes(d.county_id));\n        this.circles = filtered_circles\n        this.show_circle_marker = true\n\n    },\n    updateMarker(){\n          console.log('i[date',this.mapQueryInfo)\n          var output = []\n          var c = 0\n          this.show_marker = false\n          this.mapQueryInfo.forEach(d=>{\n              for (let [key, value] of Object.entries(d['county'])) {\n                var ele = MAPPING[value]\n                // check we have the longtitude latitude for the county\n                if(value in MAPPING){\n                    var temp = {\n                        key: c,\n                        center: [ele['lat'],ele['long']],\n                        radius:8,\n                        opacity:0.8,\n                        stroke: true,\n                        content: d['node_name']+ ' is located in '+ key,\n                        color: 'red'\n                    }\n                    c+=1\n                    output.push(temp)\n                }else{\n                    \n                }\n            }\n          })\n          if(output.length==0){\n            alert('No relevent county info for brushed nodes!') \n          }\n          this.markers = output \n          this.show_marker = true\n          \n    },\n    initCircleMarkerWithG(){\n        var nodes = this.graphData['results'][0]['data'][0]['graph']['nodes']\n        console.log('initG', nodes)\n        var circles = []\n        var that = this\n        nodes.forEach((d,i)=>{\n\n        })\n    }\n  },\n  computed:{\n     ...mapState(['graphData', 'mapInitialInfo', 'mapQueryInfo', 'mapInQueryStatus', 'activeTab', 'ecoregion','DATABASE_NAME']),\n  },\n  watch:{\n      DATABASE_NAME(){\n        // console.log(this.DATABASE_NAME, this.mapInitialInfo)\n        if(this.DATABASE_NAME==\"ppod\"){\n            this.items= ['BestPracticesAndMandates','Organization','Program','Project','Total']\n        }else{\n            this.items= ['in_flow','out_flow','resilience','degree','degree_in','degree_out','strength_in','strength_out','strength','betweenness','Total']\n        }\n      },\n      graphData(){\n        console.log('graph changed', this.graphData)\n      },\n      mapInitialInfo(){\n          this.initCircleMarker()\n      },\n      mapQueryInfo(){\n        this.updateMarker() \n        this.updateCircleMarker()\n        // this.updateMapColoring()\n      },\n      selectedInit(){\n          this.initCircleMarker()\n          this.updateCircleMarker()\n      }\n  }\n}\n</script>\n\n<style scoped>\n  @import \"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\";\n</style>\n"]},"metadata":{},"sourceType":"module"}