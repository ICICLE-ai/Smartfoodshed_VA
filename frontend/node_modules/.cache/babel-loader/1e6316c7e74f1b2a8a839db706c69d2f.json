{"ast":null,"code":"import _asyncToGenerator from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nimport * as d3 from 'd3'; // var https = require('https');\n\nimport menu from '@/store/modules/menu.js';\nimport { base_request_url, apiClient } from '@/utils/base_url';\nimport { generationEntityRelations, addItemsToSelection, removeItemsToSelection, idParsingToDict, retrieveInteractiveTable } from '@/utils/storehelp';\nimport { graphNodeLinkRemoval, graphNodeLinkExpand, retrieveNodeLinkWithType } from '@/utils/KGutils';\nimport { loadMapInitialData, getNode, queryMapInfoWithNode } from '@/utils/mapUtils';\nVue.use(Vuex);\n\nfunction initialState() {\n  return {\n    BETA_ROUTE: {\n      'name': 'DashboardBeta',\n      'route': '/dashboard-beta'\n    },\n    DASH_ROUTE: {\n      'name': 'Dashboard',\n      'route': '/'\n    },\n    graphData: null,\n    DATABASE_NAME: null,\n    // ppod or cfs \n    tableData: null,\n    // raw data\n    originalGraph: null,\n    tableSelection: null,\n    tableSelected: {},\n    idDict: {},\n    tableInteractiveMode: false,\n    interactiveTableData: null,\n    relationStatusReady: false,\n    relationTypeData: null,\n    loading: false,\n    us: null,\n    // ecoregion: null,\n    expandThreshold: 5,\n    // node expand limit \n    graphOverview: null,\n    // for link overview \n    mapInitialInfo: null,\n    mapQueryInfo: null,\n    mapInQueryStatus: false,\n    activeTab: 0,\n    currentDragging: null,\n    tableContainer: {\n      height: 1000\n    },\n    colorMapping: {},\n    // base_request_url: \"http://127.0.0.1:5000/\"\n    // base_request_url: 'https://vaapi.develop.tapis.io/'\n    database: \"\" //ppod or cfs \n\n  };\n}\n\nvar mutations = {\n  SET_DATABASE: function SET_DATABASE(state, val) {\n    state.database = val;\n  },\n  SET_DATABASE_NAME: function SET_DATABASE_NAME(state, val) {\n    state.DATABASE_NAME = val;\n  },\n  SET_graphOverview: function SET_graphOverview(state, val) {\n    state.graphOverview = val;\n  },\n  SET_expandThreshold: function SET_expandThreshold(state, val) {\n    state.expandThreshold = val;\n  },\n  SET_graphData: function SET_graphData(state, val) {\n    state.graphData = val;\n  },\n  SET_GRAPHDATA_RELATION_TYPE_DATA: function SET_GRAPHDATA_RELATION_TYPE_DATA(state, val) {\n    state.relationTypeData = val;\n  },\n  SET_graphDataBackUp: function SET_graphDataBackUp(state, val) {\n    state.originalGraph = val;\n  },\n  SET_tableData: function SET_tableData(state, val) {\n    state.tableData = val;\n  },\n  SET_tableSelection: function SET_tableSelection(state, val) {\n    state.tableSelection = val;\n  },\n  SET_TABLE_SELECTED_ADD: function SET_TABLE_SELECTED_ADD(state, _ref) {\n    var sheetName = _ref.sheetName,\n        value = _ref.value;\n    console.log(\"!!!!!!!\");\n\n    if (!state.tableSelected[sheetName]) {\n      state.tableSelected[sheetName] = {};\n    }\n\n    addItemsToSelection(state.tableSelected[sheetName], value);\n  },\n  SET_TABLE_SELECTED_REMOVE: function SET_TABLE_SELECTED_REMOVE(state, _ref2) {\n    var sheetName = _ref2.sheetName,\n        value = _ref2.value;\n    removeItemsToSelection(state.tableSelected[sheetName], value);\n  },\n  TABLE_INTERACTIVE_ON: function TABLE_INTERACTIVE_ON(state) {\n    state.tableInteractiveMode = true;\n  },\n  TABLE_INTERACTIVE_OFF: function TABLE_INTERACTIVE_OFF(state) {\n    state.tableInteractiveMode = false;\n  },\n  RESET_TABLE_SELECTED: function RESET_TABLE_SELECTED(state) {\n    state.tableSelected = {};\n  },\n  UPDATE_INTERACTIVE_TABLE: function UPDATE_INTERACTIVE_TABLE(state, _ref3) {\n    var entities = _ref3.entities,\n        relations = _ref3.relations;\n    var res = retrieveInteractiveTable(state.tableData, state.idDict, {\n      entities: entities,\n      relations: relations\n    });\n\n    if (res != null) {\n      state.interactiveTableData = res;\n    } else {\n      alert(\"retrieve nothing\");\n    }\n  },\n  RESET_GRAPHDATA: function RESET_GRAPHDATA(state) {\n    state.graphData = state.originalGraph;\n  },\n  NODE_EXPAND: function NODE_EXPAND(state, _ref4) {\n    var updatedGraphData = _ref4.updatedGraphData;\n    state.graphData = updatedGraphData;\n  },\n  NODE_REMOVE: function NODE_REMOVE(state, _ref5) {\n    var updatedGraphData = _ref5.updatedGraphData;\n    state.graphData = updatedGraphData;\n  },\n  RELATION_STATUS_COUNTY: function RELATION_STATUS_COUNTY(state) {\n    state.relationStatusReady = 'fromMap';\n  },\n  RELATION_STATUS_OFF: function RELATION_STATUS_OFF(state) {\n    state.relationStatusReady = false;\n  },\n  RELATION_STATUS_ON: function RELATION_STATUS_ON(state) {\n    state.relationStatusReady = true;\n  },\n  SET_LOADING: function SET_LOADING(state, data) {\n    state.loading = data;\n  },\n  LOADIN_MAP: function LOADIN_MAP(state, us) {\n    state.us = us;\n  },\n  LOADIN_MAP_DATA: function LOADIN_MAP_DATA(state, mapInfo) {\n    state.mapInitialInfo = mapInfo;\n  },\n  MAP_IN_QUERY: function MAP_IN_QUERY(state) {\n    state.mapInQueryStatus = true;\n  },\n  MAP_OFF_QUERY: function MAP_OFF_QUERY(state) {\n    state.mapInQueryStatus = false;\n  },\n  LOAD_QUERY_MAP_INFO: function LOAD_QUERY_MAP_INFO(state, queryRes) {\n    state.mapQueryInfo = queryRes;\n  },\n  ACTIVE_TAB: function ACTIVE_TAB(state, activeTab) {\n    state.activeTab = activeTab;\n  },\n  SET_CRRENTDRAGGING: function SET_CRRENTDRAGGING(state, vm) {\n    state.currentDragging = vm;\n  },\n  UPDATE_COLOR_MAPPING: function UPDATE_COLOR_MAPPING(state, _ref6) {\n    var label = _ref6.label,\n        color = _ref6.color;\n    state.colorMapping[label] = color;\n  }\n};\nvar actions = {\n  changeDB: function changeDB(_ref7, data) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, dispatch, state;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref7.commit, dispatch = _ref7.dispatch, state = _ref7.state;\n              commit('SET_DATABASE', data['database']); // https = await import('https');\n\n              _context.next = 4;\n              return apiClient.post(\"/changeDataBase\", data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  setExpandTh: function setExpandTh(_ref8, data) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, dispatch, state;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref8.commit, dispatch = _ref8.dispatch, state = _ref8.state;\n              commit('SET_expandThreshold', data);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  getGraphData: function getGraphData(_ref9) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, dispatch, state, path, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref9.commit, dispatch = _ref9.dispatch, state = _ref9.state;\n              path = base_request_url + 'getGraphData';\n              _context3.next = 4;\n              return axios.get(path);\n\n            case 4:\n              result = _context3.sent;\n              commit('SET_graphData', result['data']);\n              commit('SET_graphDataBackUp', result['data']);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  getGraphOverview: function getGraphOverview(_ref10) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      var commit, dispatch, state;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref10.commit, dispatch = _ref10.dispatch, state = _ref10.state;\n              axios.get(base_request_url + \"getGraphOverview\").then(function (result) {\n                commit('SET_graphOverview', result);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  getTableData: function getTableData(_ref11) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n      var commit, dispatch, state, path, result, tableSelection_temp, sheet, data;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref11.commit, dispatch = _ref11.dispatch, state = _ref11.state;\n              path = base_request_url + 'getTableData';\n              _context5.next = 4;\n              return axios.get(path);\n\n            case 4:\n              result = _context5.sent;\n              tableSelection_temp = {};\n              sheet = result['data']['sheet']; // list of sheet name\n\n              data = result['data']['data']; // list of data obj\n\n              sheet.forEach(function (s) {\n                tableSelection_temp[s] = [];\n              });\n              commit('SET_tableSelection', tableSelection_temp);\n              commit('SET_tableData', result['data']);\n              console.log(\"check table data again!!!\");\n              console.log(result['data']);\n              idParsingToDict(state.idDict, {\n                sheets: sheet,\n                data: data\n              });\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  },\n  setTableSelected: function setTableSelected(_ref12, _ref13) {\n    var commit = _ref12.commit,\n        displatch = _ref12.displatch,\n        state = _ref12.state;\n    var action = _ref13.action,\n        sheetName = _ref13.sheetName,\n        value = _ref13.value;\n    console.log(action);\n\n    if (action == \"add\") {\n      commit('SET_TABLE_SELECTED_ADD', {\n        sheetName: sheetName,\n        value: value\n      });\n    } else if (action == 'remove') {\n      commit('SET_TABLE_SELECTED_REMOVE', {\n        sheetName: sheetName,\n        value: value\n      });\n    } else {\n      console.log(\"Waring! setTableSelected action received an invalid action type: \" + action);\n    }\n  },\n  retrieveGraphFromTable: function retrieveGraphFromTable(_ref14) {\n    var commit = _ref14.commit,\n        state = _ref14.state;\n    console.log(\"retrieve graph data from table\");\n    commit('SET_LOADING', true); // data preparation\n\n    var _generationEntityRela = generationEntityRelations(state.tableSelected),\n        nodes = _generationEntityRela.nodes,\n        relations = _generationEntityRela.relations;\n\n    var path_retrieve_graph = base_request_url + 'retrieveSubgraph';\n    var path_retrieve_graph_relation = base_request_url + 'retrieveSubgraphWithR'; // set getDataRelationStatus to be false to indicate \n\n    commit('RELATION_STATUS_OFF'); // retrieve data\n\n    axios.post(path_retrieve_graph, {\n      nodes: nodes,\n      relations: relations\n    }).then(function (result) {\n      console.log(result);\n      commit('SET_graphData', result['data']);\n    }).catch(function (error) {\n      console.log(error);\n      console.log(error.response.status);\n    });\n    axios.post(path_retrieve_graph_relation, {\n      nodes: nodes,\n      relations: relations\n    }).then(function (result) {\n      console.log(\"!!!!!!1---------!!!!!!!!!!!! relation data back \");\n      console.log(result);\n      commit('SET_LOADING', false);\n      commit('SET_GRAPHDATA_RELATION_TYPE_DATA', result['data']);\n      commit('RELATION_STATUS_ON');\n    }).catch(function (error) {\n      console.log(error);\n      console.log(error.response.status);\n    });\n  },\n  retrieveSubTable: function retrieveSubTable(_ref15, _ref16) {\n    var commit = _ref15.commit,\n        state = _ref15.state;\n    var entities = _ref16.entities,\n        relations = _ref16.relations;\n    console.log(\"retrieve sub table!!!\");\n    commit('TABLE_INTERACTIVE_ON');\n    commit('UPDATE_INTERACTIVE_TABLE', {\n      entities: entities,\n      relations: relations\n    });\n    commit('RESET_TABLE_SELECTED');\n  },\n  resetTableGraph: function resetTableGraph(_ref17) {\n    var commit = _ref17.commit,\n        state = _ref17.state;\n    commit('TABLE_INTERACTIVE_OFF');\n    commit('RESET_GRAPHDATA');\n  },\n  node_expand: function node_expand(_ref18, _ref19) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n      var commit, state, node_id, relation, updatedGraphData;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref18.commit, state = _ref18.state;\n              node_id = _ref19.node_id, relation = _ref19.relation;\n              commit('SET_LOADING', true);\n              _context6.next = 5;\n              return graphNodeLinkExpand(state.graphData, node_id, relation, state.expandThreshold);\n\n            case 5:\n              updatedGraphData = _context6.sent;\n              commit('SET_LOADING', false);\n\n              if (updatedGraphData.status == 200) {\n                commit('NODE_EXPAND', {\n                  updatedGraphData: updatedGraphData['data']\n                });\n                commit('SET_GRAPHDATA_RELATION_TYPE_DATA', updatedGraphData['data']);\n              } else {\n                alert(\"Expansion not successful\");\n              }\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  node_remove: function node_remove(_ref20, _ref21) {\n    var state = _ref20.state,\n        commit = _ref20.commit;\n    var node_id = _ref21.node_id;\n    var updatedGraphData = graphNodeLinkRemoval(state.graphData, node_id);\n    commit('NODE_REMOVE', {\n      updatedGraphData: updatedGraphData\n    });\n  },\n  load_map: function load_map(_ref22) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n      var state, commit, mapInitialInfo;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              state = _ref22.state, commit = _ref22.commit;\n              _context7.next = 3;\n              return loadMapInitialData();\n\n            case 3:\n              mapInitialInfo = _context7.sent;\n\n              if (mapInitialInfo != null) {\n                // \n                commit(\"LOADIN_MAP_DATA\", mapInitialInfo['data']);\n                commit('SET_DATABASE_NAME', mapInitialInfo['database']);\n              }\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  },\n  retrieveNodesLinksWithTypes: function retrieveNodesLinksWithTypes(_ref23, _ref24) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n      var state, commit, entity_type, relationship_type, updatedGraphData;\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              state = _ref23.state, commit = _ref23.commit;\n              entity_type = _ref24.entity_type, relationship_type = _ref24.relationship_type;\n              commit('SET_LOADING', true);\n              _context8.next = 5;\n              return retrieveNodeLinkWithType(entity_type, relationship_type);\n\n            case 5:\n              updatedGraphData = _context8.sent;\n              commit('SET_LOADING', false);\n\n              if (updatedGraphData.status == 200) {\n                commit('NODE_EXPAND', {\n                  updatedGraphData: updatedGraphData['data']\n                });\n                commit('SET_GRAPHDATA_RELATION_TYPE_DATA', updatedGraphData['data']);\n                commit('RELATION_STATUS_ON');\n              } else {\n                alert(\"Expansion not successful\");\n              }\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  },\n  retrieveNodeGeo: function retrieveNodeGeo(_ref25, _ref26) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n      var commit, node, mapInfo;\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref25.commit;\n              node = _ref26.node;\n              console.log(\"Check node info\");\n              commit(\"MAP_IN_QUERY\");\n\n              if (!(node != null)) {\n                _context9.next = 11;\n                break;\n              }\n\n              console.log(node);\n              _context9.next = 8;\n              return queryMapInfoWithNode(node);\n\n            case 8:\n              mapInfo = _context9.sent;\n              console.log(mapInfo);\n\n              if (mapInfo != null) {\n                commit(\"LOAD_QUERY_MAP_INFO\", mapInfo);\n              }\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }))();\n  },\n  active_tab: function active_tab(_ref27, activeTab) {\n    var commit = _ref27.commit;\n    commit(\"ACTIVE_TAB\", activeTab);\n  },\n  changeCurrentDraggingVM: function changeCurrentDraggingVM(_ref28, vm) {\n    var commit = _ref28.commit;\n    commit('SET_CRRENTDRAGGING', vm);\n  },\n  containerSizeChange: function containerSizeChange(_ref29, _ref30) {\n    var commit = _ref29.commit,\n        state = _ref29.state;\n    var container = _ref30.container,\n        height = _ref30.height;\n    state.tableContainer.height = height;\n  },\n  county2node: function county2node(_ref31, nodeid) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              commit = _ref31.commit;\n              _context10.next = 3;\n              return getNode(nodeid);\n\n            case 3:\n              result = _context10.sent;\n              console.log(result); // commit('RELATION_STATUS_OFF')\n\n              commit('SET_graphData', result['data']);\n              commit('RELATION_STATUS_COUNTY');\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  },\n  updateColorMapping: function updateColorMapping(_ref32, _ref33) {\n    var commit = _ref32.commit;\n    var label = _ref33.label,\n        color = _ref33.color;\n    commit('UPDATE_COLOR_MAPPING', {\n      label: label,\n      color: color\n    });\n  }\n};\nexport default new Vuex.Store({\n  state: initialState,\n  getters: {},\n  mutations: mutations,\n  actions: actions,\n  modules: {\n    menu: menu\n  }\n});","map":{"version":3,"sources":["/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/src/store/index.js"],"names":["Vue","Vuex","axios","d3","menu","base_request_url","apiClient","generationEntityRelations","addItemsToSelection","removeItemsToSelection","idParsingToDict","retrieveInteractiveTable","graphNodeLinkRemoval","graphNodeLinkExpand","retrieveNodeLinkWithType","loadMapInitialData","getNode","queryMapInfoWithNode","use","initialState","BETA_ROUTE","DASH_ROUTE","graphData","DATABASE_NAME","tableData","originalGraph","tableSelection","tableSelected","idDict","tableInteractiveMode","interactiveTableData","relationStatusReady","relationTypeData","loading","us","expandThreshold","graphOverview","mapInitialInfo","mapQueryInfo","mapInQueryStatus","activeTab","currentDragging","tableContainer","height","colorMapping","database","mutations","SET_DATABASE","state","val","SET_DATABASE_NAME","SET_graphOverview","SET_expandThreshold","SET_graphData","SET_GRAPHDATA_RELATION_TYPE_DATA","SET_graphDataBackUp","SET_tableData","SET_tableSelection","SET_TABLE_SELECTED_ADD","sheetName","value","console","log","SET_TABLE_SELECTED_REMOVE","TABLE_INTERACTIVE_ON","TABLE_INTERACTIVE_OFF","RESET_TABLE_SELECTED","UPDATE_INTERACTIVE_TABLE","entities","relations","res","alert","RESET_GRAPHDATA","NODE_EXPAND","updatedGraphData","NODE_REMOVE","RELATION_STATUS_COUNTY","RELATION_STATUS_OFF","RELATION_STATUS_ON","SET_LOADING","data","LOADIN_MAP","LOADIN_MAP_DATA","mapInfo","MAP_IN_QUERY","MAP_OFF_QUERY","LOAD_QUERY_MAP_INFO","queryRes","ACTIVE_TAB","SET_CRRENTDRAGGING","vm","UPDATE_COLOR_MAPPING","label","color","actions","changeDB","commit","dispatch","post","setExpandTh","getGraphData","path","get","result","getGraphOverview","then","getTableData","tableSelection_temp","sheet","forEach","s","sheets","setTableSelected","displatch","action","retrieveGraphFromTable","nodes","path_retrieve_graph","path_retrieve_graph_relation","catch","error","response","status","retrieveSubTable","resetTableGraph","node_expand","node_id","relation","node_remove","load_map","retrieveNodesLinksWithTypes","entity_type","relationship_type","retrieveNodeGeo","node","active_tab","changeCurrentDraggingVM","containerSizeChange","container","county2node","nodeid","updateColorMapping","Store","getters","modules"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport * as d3 from 'd3'\n// var https = require('https');\nimport menu from '@/store/modules/menu.js'\nimport { base_request_url,apiClient } from '@/utils/base_url'\nimport {generationEntityRelations, \n        addItemsToSelection, \n        removeItemsToSelection,\n        idParsingToDict,\n        retrieveInteractiveTable} from '@/utils/storehelp'\nimport {graphNodeLinkRemoval, \n        graphNodeLinkExpand, \n        retrieveNodeLinkWithType} from '@/utils/KGutils'\nimport {\n        loadMapInitialData, getNode,\n        queryMapInfoWithNode} from '@/utils/mapUtils'\nVue.use(Vuex)\nfunction initialState () {\n  return {\n    BETA_ROUTE: {'name': 'DashboardBeta', 'route': '/dashboard-beta'}, \n    DASH_ROUTE: {'name': 'Dashboard', 'route': '/'}, \n    graphData: null,\n    DATABASE_NAME: null, // ppod or cfs \n    tableData: null, // raw data\n    originalGraph: null, \n    tableSelection: null,\n    tableSelected: {},\n    idDict: {},\n    tableInteractiveMode: false, \n    interactiveTableData: null, \n    relationStatusReady: false, \n    relationTypeData: null,\n    loading: false,\n    us: null,\n    // ecoregion: null,\n    expandThreshold: 5, // node expand limit \n    graphOverview: null, // for link overview \n    mapInitialInfo: null, \n    mapQueryInfo: null, \n    mapInQueryStatus: false,  \n    activeTab: 0, \n    currentDragging: null,\n    tableContainer: {\n      height: 1000\n    }, \n    colorMapping: {\n\n    },\n    // base_request_url: \"http://127.0.0.1:5000/\"\n    // base_request_url: 'https://vaapi.develop.tapis.io/'\n    database: \"\", //ppod or cfs \n  }\n}\nconst mutations = {\n  SET_DATABASE(state, val){\n    state.database = val \n  },\n  SET_DATABASE_NAME(state, val){\n    state.DATABASE_NAME = val\n  },\n  SET_graphOverview(state, val){\n    state.graphOverview = val\n  },\n  SET_expandThreshold(state, val){\n    state.expandThreshold = val\n  },\n  SET_graphData (state, val) {\n    state.graphData = val\n  },\n  SET_GRAPHDATA_RELATION_TYPE_DATA(state, val){\n    state.relationTypeData = val\n  },\n  SET_graphDataBackUp (state, val) {\n    state.originalGraph = val\n  },\n  SET_tableData (state, val) {\n    state.tableData = val\n  },\n  SET_tableSelection (state, val) {\n    state.tableSelection = val\n  },\n  SET_TABLE_SELECTED_ADD (state, {sheetName, value}) {\n    console.log(\"!!!!!!!\")\n    if(!state.tableSelected[sheetName]){\n      state.tableSelected[sheetName] = {}  \n    }  \n    addItemsToSelection(state.tableSelected[sheetName], value)\n  },\n  SET_TABLE_SELECTED_REMOVE(state, {sheetName, value}) {\n    removeItemsToSelection(state.tableSelected[sheetName], value)\n  }, \n  TABLE_INTERACTIVE_ON(state, ) {\n    state.tableInteractiveMode = true\n  },\n  TABLE_INTERACTIVE_OFF(state, ) {\n    state.tableInteractiveMode = false\n  },\n\n  RESET_TABLE_SELECTED(state, ) {\n    state.tableSelected = {}\n  },\n  UPDATE_INTERACTIVE_TABLE(state, {entities, relations}){ \n    const res = retrieveInteractiveTable(state.tableData, state.idDict, {entities, relations}) \n    if (res != null){\n      state.interactiveTableData = res\n    }else{\n      alert(\"retrieve nothing\")\n    }\n  },\n  RESET_GRAPHDATA(state, ){\n    state.graphData = state.originalGraph\n  },\n  NODE_EXPAND(state, {updatedGraphData}){\n    state.graphData = updatedGraphData \n  }, \n  NODE_REMOVE(state, {updatedGraphData}){\n    state.graphData = updatedGraphData\n  },\n  RELATION_STATUS_COUNTY(state,){\n    state.relationStatusReady = 'fromMap'\n  },\n  RELATION_STATUS_OFF(state,){\n    state.relationStatusReady = false \n  },\n  RELATION_STATUS_ON(state,){\n    state.relationStatusReady = true\n  },\n  SET_LOADING(state,data){\n    state.loading = data \n  },\n  LOADIN_MAP(state, us){\n    state.us = us; \n  }, \n  LOADIN_MAP_DATA(state, mapInfo){\n    state.mapInitialInfo = mapInfo\n  }, \n  MAP_IN_QUERY(state, ) {\n    state.mapInQueryStatus = true \n  }, \n  MAP_OFF_QUERY(state, ) {\n    state.mapInQueryStatus = false\n  }, \n  LOAD_QUERY_MAP_INFO(state, queryRes) {\n    state.mapQueryInfo = queryRes\n  },\n  ACTIVE_TAB(state, activeTab){\n    state.activeTab = activeTab\n  },\n  SET_CRRENTDRAGGING(state, vm){\n    state.currentDragging = vm;\n  },\n  UPDATE_COLOR_MAPPING(state, {label, color}) {\n    state.colorMapping[label] = color\n  }\n}\nconst actions = {\n  async changeDB({commit, dispatch, state}, data){\n    commit('SET_DATABASE', data['database'])\n    // https = await import('https');\n    await apiClient.post(\"/changeDataBase\", data)\n  },\n  async setExpandTh ({commit, dispatch, state}, data){\n    commit('SET_expandThreshold', data)\n  },\n  async getGraphData ({commit, dispatch, state}) {\n    const path = base_request_url+'getGraphData'\n    var result = await axios.get(path)\n    commit('SET_graphData', result['data'])\n    commit('SET_graphDataBackUp', result['data'])\n   \n  },\n  async getGraphOverview({commit, dispatch, state}){\n    axios.get(base_request_url+\"getGraphOverview\").then(result=>{\n      commit('SET_graphOverview', result)\n    })\n  },\n  async getTableData ({commit, dispatch, state}) {\n    const path = base_request_url+'getTableData'\n    var result = await axios.get(path)\n    var tableSelection_temp = {}\n    var sheet = result['data']['sheet'] // list of sheet name\n    var data = result['data']['data'] // list of data obj\n    sheet.forEach(s => {\n      tableSelection_temp[s] = []\n    })\n    commit('SET_tableSelection', tableSelection_temp)\n    commit('SET_tableData', result['data'])\n    console.log(\"check table data again!!!\")\n    console.log(result['data'])\n    idParsingToDict(state.idDict, {sheets: sheet, data: data})\n  },\n  setTableSelected ({commit, displatch, state}, {action, sheetName, value}) {\n    console.log(action)\n    if (action == \"add\") {\n      commit('SET_TABLE_SELECTED_ADD', {sheetName, value})\n    } else if (action == 'remove') {\n      commit('SET_TABLE_SELECTED_REMOVE', {sheetName, value})\n    } else {\n      console.log(\"Waring! setTableSelected action received an invalid action type: \" + action)\n    }\n  },\n  retrieveGraphFromTable({commit, state}) {\n    console.log(\"retrieve graph data from table\") \n    commit('SET_LOADING', true)\n    // data preparation\n    let {nodes, relations} = generationEntityRelations(state.tableSelected)\n    const path_retrieve_graph = base_request_url+'retrieveSubgraph'\n    const path_retrieve_graph_relation = base_request_url+'retrieveSubgraphWithR' \n    // set getDataRelationStatus to be false to indicate \n    commit('RELATION_STATUS_OFF')\n    // retrieve data\n    axios.post(path_retrieve_graph, {nodes, relations})\n      .then(result => {\n        console.log(result)\n        commit('SET_graphData', result['data']) \n      })\n      .catch(error => {\n        console.log(error)\n        console.log(error.response.status)\n      })\n    \n    axios.post(path_retrieve_graph_relation, {nodes, relations})\n      .then(result => {\n        console.log(\"!!!!!!1---------!!!!!!!!!!!! relation data back \")\n        console.log(result)\n        commit('SET_LOADING', false)\n        commit('SET_GRAPHDATA_RELATION_TYPE_DATA', result['data'])  \n        commit('RELATION_STATUS_ON')\n      })\n      .catch(error => {\n        console.log(error)\n        console.log(error.response.status)\n      })\n    \n  },\n  retrieveSubTable({commit, state}, {entities, relations}) { \n    console.log(\"retrieve sub table!!!\")\n    commit('TABLE_INTERACTIVE_ON')\n    commit('UPDATE_INTERACTIVE_TABLE', {entities, relations})\n    commit('RESET_TABLE_SELECTED')\n  },\n  resetTableGraph({commit, state}, ){\n    commit('TABLE_INTERACTIVE_OFF') \n    commit('RESET_GRAPHDATA')\n  },\n  async node_expand({commit, state}, {node_id, relation}){\n    \n    commit('SET_LOADING', true)\n    const updatedGraphData = await graphNodeLinkExpand(state.graphData, node_id, relation, state.expandThreshold)\n    commit('SET_LOADING', false)\n    if (updatedGraphData.status == 200){\n      commit('NODE_EXPAND', {updatedGraphData: updatedGraphData['data']})\n      commit('SET_GRAPHDATA_RELATION_TYPE_DATA', updatedGraphData['data']) \n    } else {\n      alert(\"Expansion not successful\")\n    }\n     \n  }, \n  node_remove({state, commit}, {node_id}){\n    const updatedGraphData = graphNodeLinkRemoval(state.graphData, node_id)\n    commit('NODE_REMOVE', {updatedGraphData: updatedGraphData})\n  },\n  async load_map({state, commit}) {\n   \n    // load map geo data\n    // const us = await d3.json('https://raw.githubusercontent.com/chrisdaly/map-data/master/us-counties.topojson.txt')\n    // var us = {'test':'test'}\n    // const us = await d3.json('../assets/us-countries.topojson.txt')\n    // load map detail data \n    // commit(\"LOADIN_MAP\", us)\n    const mapInitialInfo = await loadMapInitialData(); \n    if (mapInitialInfo != null) {\n      // \n      commit (\"LOADIN_MAP_DATA\", mapInitialInfo['data'])\n      commit('SET_DATABASE_NAME', mapInitialInfo['database'])\n    }\n    \n  },\n  async retrieveNodesLinksWithTypes({state, commit}, {entity_type, relationship_type}){\n    commit('SET_LOADING', true)\n    const updatedGraphData = await retrieveNodeLinkWithType(entity_type, relationship_type)\n    commit('SET_LOADING', false)\n    if (updatedGraphData.status == 200){\n      commit('NODE_EXPAND', {updatedGraphData: updatedGraphData['data']})\n      commit('SET_GRAPHDATA_RELATION_TYPE_DATA', updatedGraphData['data']) \n      commit('RELATION_STATUS_ON')\n    } else {\n      alert(\"Expansion not successful\")\n    }\n  }, \n  async retrieveNodeGeo({commit}, {node}){\n    console.log(\"Check node info\")\n    commit(\"MAP_IN_QUERY\") \n    if (node != null) {\n      console.log(node)\n      const mapInfo = await queryMapInfoWithNode(node)\n      console.log(mapInfo)\n      if (mapInfo != null) {\n        commit (\"LOAD_QUERY_MAP_INFO\", mapInfo)\n      }\n    }\n  },\n  active_tab({commit}, activeTab) {\n    commit(\"ACTIVE_TAB\", activeTab)\n  }, \n  changeCurrentDraggingVM({commit}, vm){\n    commit('SET_CRRENTDRAGGING', vm)\n  },\n  containerSizeChange({commit, state}, {container, height}){\n    state.tableContainer.height = height\n  },\n  async county2node({commit}, nodeid){\n    var result = await getNode(nodeid)\n    console.log(result)\n    // commit('RELATION_STATUS_OFF')\n    commit('SET_graphData', result['data']) \n    commit('RELATION_STATUS_COUNTY')\n  }, \n  updateColorMapping({commit}, {label, color}){\n    commit('UPDATE_COLOR_MAPPING', {label, color})\n  }\n}\nexport default new Vuex.Store({\n  state: initialState,\n  getters: {\n  },\n  mutations: mutations,\n  actions: actions,\n  modules: {\n    menu,\n  }\n})\n"]},"metadata":{},"sourceType":"module"}