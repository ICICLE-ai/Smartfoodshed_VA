{"ast":null,"code":"import _asyncToGenerator from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport axios from 'axios';\nimport { base_request_url } from './base_url'; // var base_request_url = \"https://vaapi.develop.tapis.io/\"\n// var base_request_url= \"http://127.0.0.1:5000/\"\n\nfunction graphDataParsing(neo4jD3DataObj, entitiesContainer, relationsContainer) {\n  var nodes = neo4jD3DataObj.results[0].data[0].graph.nodes;\n  var relations = neo4jD3DataObj.results[0].data[0].graph.relationships;\n  console.log(\"getting nodes and links before parsing\"); // initialize entitiesContainer and relationsContainer\n\n  entitiesContainer.splice(0, entitiesContainer.length);\n  relationsContainer.splice(0, relationsContainer.length);\n  nodes.forEach(function (node) {\n    entitiesContainer.push(node.id);\n  });\n  relations.forEach(function (relation) {\n    relationsContainer.push(relation.id);\n  });\n}\n\nfunction graphNodeLinkRemoval(graphData, nodeId) {\n  var newGraphData = _objectSpread({}, graphData);\n\n  var nodes = newGraphData.results[0].data[0].graph.nodes;\n  var relations = newGraphData.results[0].data[0].graph.relationships;\n\n  if (nodeId == null) {\n    alert(\"empty node id to be remove\");\n  } // remove nodes\n\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].id == nodeId) {\n      nodes.splice(i, 1); // assume no duplicate nodes\n\n      break;\n    }\n  }\n\n  var relationRemaining = [];\n\n  for (var j = 0; j < relations.length; j++) {\n    if (relations[j].startNode == nodeId || relations[j].endNode == nodeId) {\n      console.log(\"REMOVED! - starNode: \" + relations[j].startNode + \", endNode: \" + relations[j].endNode);\n    } else {\n      relationRemaining.push(relations[j]);\n    }\n  }\n\n  newGraphData.results[0].data[0].graph.relationships = relationRemaining;\n  return newGraphData;\n}\n\nfunction graphNodeLinkExpand(_x, _x2, _x3, _x4) {\n  return _graphNodeLinkExpand.apply(this, arguments);\n}\n\nfunction _graphNodeLinkExpand() {\n  _graphNodeLinkExpand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(graphData, nodeId, relation, threshold) {\n    var newGraphData, nodes, relations, nodeList, relationList, passingData, path, updatedGraphData;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newGraphData = _objectSpread({}, graphData);\n            nodes = newGraphData.results[0].data[0].graph.nodes;\n            relations = newGraphData.results[0].data[0].graph.relationships;\n            nodeList = [];\n            relationList = [];\n            nodes.forEach(function (node) {\n              nodeList.push(node.id);\n            });\n            relations.forEach(function (relation) {\n              relationList.push(relation.id);\n            });\n            passingData = {\n              nodes: nodeList,\n              relations: relationList,\n              expand_node: nodeId,\n              relationship_name: relation,\n              threshold: threshold\n            };\n            path = base_request_url + \"expandNodeWithR\";\n            _context.next = 11;\n            return axios.post(path, passingData);\n\n          case 11:\n            updatedGraphData = _context.sent;\n            console.log(updatedGraphData);\n            return _context.abrupt(\"return\", updatedGraphData);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _graphNodeLinkExpand.apply(this, arguments);\n}\n\nfunction retrieveNodeLinkWithType(_x5, _x6) {\n  return _retrieveNodeLinkWithType.apply(this, arguments);\n}\n\nfunction _retrieveNodeLinkWithType() {\n  _retrieveNodeLinkWithType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(entity_type, relationship_type) {\n    var data, path, updatedGraphData;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (relationship_type.length == 0) {\n              path = base_request_url + \"getGwithEntityType\";\n              data = {\n                \"entity_type\": entity_type\n              };\n            } else {\n              path = base_request_url + \"getGwithRelationshipType\";\n              data = {\n                \"relationship_type\": relationship_type\n              };\n            }\n\n            console.log(entity_type);\n            console.log(relationship_type);\n            _context2.next = 5;\n            return axios.post(path, data);\n\n          case 5:\n            updatedGraphData = _context2.sent;\n            console.log(updatedGraphData);\n            return _context2.abrupt(\"return\", updatedGraphData);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _retrieveNodeLinkWithType.apply(this, arguments);\n}\n\nexport { graphDataParsing, graphNodeLinkRemoval, graphNodeLinkExpand, retrieveNodeLinkWithType };","map":{"version":3,"sources":["/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/src/utils/KGutils.js"],"names":["axios","base_request_url","graphDataParsing","neo4jD3DataObj","entitiesContainer","relationsContainer","nodes","results","data","graph","relations","relationships","console","log","splice","length","forEach","node","push","id","relation","graphNodeLinkRemoval","graphData","nodeId","newGraphData","alert","i","relationRemaining","j","startNode","endNode","graphNodeLinkExpand","threshold","nodeList","relationList","passingData","expand_node","relationship_name","path","post","updatedGraphData","retrieveNodeLinkWithType","entity_type","relationship_type"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { base_request_url } from './base_url'\n// var base_request_url = \"https://vaapi.develop.tapis.io/\"\n// var base_request_url= \"http://127.0.0.1:5000/\"\nfunction graphDataParsing(neo4jD3DataObj, entitiesContainer, relationsContainer) {\n\n    const nodes = neo4jD3DataObj.results[0].data[0].graph.nodes \n    const relations = neo4jD3DataObj.results[0].data[0].graph.relationships \n    console.log(\"getting nodes and links before parsing\")\n    // initialize entitiesContainer and relationsContainer\n   entitiesContainer.splice(0, entitiesContainer.length)\n   relationsContainer.splice(0, relationsContainer.length)\n\n   nodes.forEach(node => {\n       entitiesContainer.push(node.id)\n   })\n   relations.forEach(relation => {\n        relationsContainer.push(relation.id)\n   })\n}\n\nfunction graphNodeLinkRemoval(graphData, nodeId) { \n\n    const newGraphData = {...graphData}\n    const nodes = newGraphData.results[0].data[0].graph.nodes \n    const relations = newGraphData.results[0].data[0].graph.relationships  \n    if (nodeId == null) {\n        alert(\"empty node id to be remove\")\n    }\n    // remove nodes\n    for(let i = 0; i < nodes.length; i++){\n        if(nodes[i].id == nodeId){\n            nodes.splice(i, 1)\n            // assume no duplicate nodes\n            break\n        }\n    }\n    const relationRemaining = []\n    for(let j = 0; j < relations.length; j++){\n        \n        if(relations[j].startNode == nodeId || relations[j].endNode == nodeId){\n            console.log(\"REMOVED! - starNode: \" + relations[j].startNode + \", endNode: \" + relations[j].endNode)\n        }else{\n            relationRemaining.push(relations[j])\n        }\n    }\n    newGraphData.results[0].data[0].graph.relationships = relationRemaining \n    return newGraphData\n}\n\nasync function graphNodeLinkExpand(graphData, nodeId, relation, threshold) { \n    const newGraphData = {...graphData}\n    const nodes = newGraphData.results[0].data[0].graph.nodes \n    const relations = newGraphData.results[0].data[0].graph.relationships  \n    const nodeList = [] \n    const relationList = [] \n    nodes.forEach(node => {\n        nodeList.push(node.id)\n    })\n    relations.forEach(relation => {\n        relationList.push(relation.id)\n    })\n    \n    const passingData = {nodes: nodeList, relations: relationList, expand_node: nodeId, relationship_name:relation, threshold: threshold}\n    const path = base_request_url+\"expandNodeWithR\"\n    const updatedGraphData = await axios.post(path, passingData)\n    console.log(updatedGraphData)\n    return updatedGraphData\n}\n\nasync function retrieveNodeLinkWithType(entity_type, relationship_type) { \n    let data; \n    let path; \n    if(relationship_type.length == 0){\n        path = base_request_url+\"getGwithEntityType\"\n        data = {\"entity_type\":entity_type}\n    } else {\n        path = base_request_url+\"getGwithRelationshipType\"\n        data = {\"relationship_type\":relationship_type}\n    }\n    console.log(entity_type) \n    console.log(relationship_type)\n    const updatedGraphData = await axios.post(path, data)\n    console.log(updatedGraphData)\n    return updatedGraphData\n}\n\n\nexport {graphDataParsing, graphNodeLinkRemoval, graphNodeLinkExpand, retrieveNodeLinkWithType}"]},"metadata":{},"sourceType":"module"}