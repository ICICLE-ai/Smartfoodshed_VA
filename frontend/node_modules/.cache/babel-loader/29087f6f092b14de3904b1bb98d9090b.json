{"ast":null,"code":"import _asyncToGenerator from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport axios from 'axios';\nimport { base_request_url } from './base_url'; // var base_request_url = \"https://vaapi.develop.tapis.io/\"\n// var base_request_url= \"http://127.0.0.1:5000/\"\n\nfunction loadMapInitialData() {\n  return _loadMapInitialData.apply(this, arguments);\n}\n\nfunction _loadMapInitialData() {\n  _loadMapInitialData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var path, responseData;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            path = base_request_url + \"g\";\n            responseData = getRequest(path, {\n              \"204\": \"No content retrieved for initializing map\",\n              \"400\": \"Error in initializing map\"\n            });\n            return _context.abrupt(\"return\", responseData);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadMapInitialData.apply(this, arguments);\n}\n\nfunction queryMapInfoWithNode(_x) {\n  return _queryMapInfoWithNode.apply(this, arguments);\n}\n\nfunction _queryMapInfoWithNode() {\n  _queryMapInfoWithNode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(node_list) {\n    var path, data, responseData;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            path = base_request_url + \"getCountyInfo\";\n            data = {\n              \"node\": node_list\n            };\n            responseData = postRequest(path, data, {\n              \"204\": \"No content retrieved for selected node list\",\n              \"400\": \"Error in retrieve geo info for the selected nodes \"\n            });\n            return _context2.abrupt(\"return\", responseData);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _queryMapInfoWithNode.apply(this, arguments);\n}\n\nfunction postRequest(_x2, _x3, _x4) {\n  return _postRequest.apply(this, arguments);\n}\n\nfunction _postRequest() {\n  _postRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(url, data, warningMsg) {\n    var response, statusCode;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.post(url, data);\n\n          case 2:\n            response = _context3.sent;\n            statusCode = response.status;\n            console.log(statusCode);\n\n            if (!(statusCode == \"204\")) {\n              _context3.next = 10;\n              break;\n            }\n\n            alert(warningMsg['204']);\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n            if (!(statusCode == \"400\")) {\n              _context3.next = 15;\n              break;\n            }\n\n            alert(warningMsg['400']);\n            return _context3.abrupt(\"return\", null);\n\n          case 15:\n            return _context3.abrupt(\"return\", response['data']);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _postRequest.apply(this, arguments);\n}\n\nfunction getRequest(_x5, _x6) {\n  return _getRequest.apply(this, arguments);\n}\n\nfunction _getRequest() {\n  _getRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(url, warningMsg) {\n    var response, statusCode;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axios.get(url);\n\n          case 2:\n            response = _context4.sent;\n            statusCode = response.status;\n\n            if (!(statusCode == \"200\")) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", response['data']);\n\n          case 8:\n            if (!(statusCode == \"204\")) {\n              _context4.next = 13;\n              break;\n            }\n\n            alert(warningMsg['204']);\n            return _context4.abrupt(\"return\", null);\n\n          case 13:\n            alert(warningMsg['400']);\n            return _context4.abrupt(\"return\", null);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getRequest.apply(this, arguments);\n}\n\nfunction getNode(_x7) {\n  return _getNode.apply(this, arguments);\n}\n\nfunction _getNode() {\n  _getNode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(id) {\n    var path, data, response;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            path = base_request_url + \"countyToNodes\";\n            data = {\n              'county_id': id\n            };\n            _context5.next = 4;\n            return axios.post(path, data);\n\n          case 4:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response);\n\n          case 6:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getNode.apply(this, arguments);\n}\n\nexport { loadMapInitialData, queryMapInfoWithNode, getNode };","map":{"version":3,"sources":["/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/src/utils/mapUtils.js"],"names":["axios","base_request_url","loadMapInitialData","path","responseData","getRequest","queryMapInfoWithNode","node_list","data","postRequest","url","warningMsg","post","response","statusCode","status","console","log","alert","get","getNode","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC,C,CACA;AACA;;SACeC,kB;;;;;gFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,IADV,GACiBF,gBAAgB,GAAC,GADlC;AAEUG,YAAAA,YAFV,GAEyBC,UAAU,CAACF,IAAD,EAAO;AAClC,qBAAO,2CAD2B;AAElC,qBAAO;AAF2B,aAAP,CAFnC;AAAA,6CAOWC,YAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWeE,oB;;;;;kFAAf,kBAAoCC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACUJ,YAAAA,IADV,GACiBF,gBAAgB,GAAC,eADlC;AAEUO,YAAAA,IAFV,GAEiB;AACT,sBAAQD;AADC,aAFjB;AAKUH,YAAAA,YALV,GAKyBK,WAAW,CAACN,IAAD,EAAOK,IAAP,EAAa;AACzC,qBAAO,6CADkC;AAEzC,qBAAO;AAFkC,aAAb,CALpC;AAAA,8CASWJ,YATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAYeK,W;;;;;yEAAf,kBAA2BC,GAA3B,EAAgCF,IAAhC,EAAsCG,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BX,KAAK,CAACY,IAAN,CAAWF,GAAX,EAAgBF,IAAhB,CAD3B;;AAAA;AACUK,YAAAA,QADV;AAEUC,YAAAA,UAFV,GAEuBD,QAAQ,CAACE,MAFhC;AAGIC,YAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;;AAHJ,kBAIQA,UAAU,IAAI,KAJtB;AAAA;AAAA;AAAA;;AAKQI,YAAAA,KAAK,CAACP,UAAU,CAAC,KAAD,CAAX,CAAL;AALR,8CAMe,IANf;;AAAA;AAAA,kBAOeG,UAAU,IAAI,KAP7B;AAAA;AAAA;AAAA;;AAQQI,YAAAA,KAAK,CAACP,UAAU,CAAC,KAAD,CAAX,CAAL;AARR,8CASe,IATf;;AAAA;AAAA,8CAWeE,QAAQ,CAAC,MAAD,CAXvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAeeR,U;;;;;wEAAf,kBAA0BK,GAA1B,EAA+BC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BX,KAAK,CAACmB,GAAN,CAAUT,GAAV,CAD3B;;AAAA;AACUG,YAAAA,QADV;AAEUC,YAAAA,UAFV,GAEuBD,QAAQ,CAACE,MAFhC;;AAAA,kBAGQD,UAAU,IAAI,KAHtB;AAAA;AAAA;AAAA;;AAAA,8CAIeD,QAAQ,CAAC,MAAD,CAJvB;;AAAA;AAAA,kBAKeC,UAAU,IAAI,KAL7B;AAAA;AAAA;AAAA;;AAMQI,YAAAA,KAAK,CAACP,UAAU,CAAC,KAAD,CAAX,CAAL;AANR,8CAOe,IAPf;;AAAA;AASQO,YAAAA,KAAK,CAACP,UAAU,CAAC,KAAD,CAAX,CAAL;AATR,8CAUe,IAVf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAceS,O;;;;;qEAAf,kBAAuBC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUlB,YAAAA,IADV,GACiBF,gBAAgB,GAAC,eADlC;AAEUO,YAAAA,IAFV,GAEiB;AACT,2BAAaa;AADJ,aAFjB;AAAA;AAAA,mBAK2BrB,KAAK,CAACY,IAAN,CAAWT,IAAX,EAAiBK,IAAjB,CAL3B;;AAAA;AAKUK,YAAAA,QALV;AAAA,8CAMWA,QANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASA,SAAQX,kBAAR,EAA4BI,oBAA5B,EAAiDc,OAAjD","sourcesContent":["import axios from 'axios'\nimport { base_request_url } from './base_url'\n// var base_request_url = \"https://vaapi.develop.tapis.io/\"\n// var base_request_url= \"http://127.0.0.1:5000/\"\nasync function loadMapInitialData(){\n    const path = base_request_url+\"g\"\n    const responseData = getRequest(path, {\n        \"204\": \"No content retrieved for initializing map\", \n        \"400\": \"Error in initializing map\"\n    })\n    \n    return responseData\n}\n\n\nasync function queryMapInfoWithNode(node_list){\n    const path = base_request_url+\"getCountyInfo\" \n    const data = {\n        \"node\": node_list\n    }\n    const responseData = postRequest(path, data, {\n        \"204\": \"No content retrieved for selected node list\", \n        \"400\": \"Error in retrieve geo info for the selected nodes \"\n    }) \n    return responseData \n}\n\nasync function postRequest(url, data, warningMsg) { \n    const response = await axios.post(url, data)\n    const statusCode = response.status\n    console.log(statusCode)\n    if (statusCode == \"204\") {\n        alert(warningMsg['204'])\n        return null\n    } else  if(statusCode == \"400\"){\n        alert(warningMsg['400'])\n        return null\n    } else {\n        return response['data'] \n    }\n}\n\nasync function getRequest(url, warningMsg) { \n    const response = await axios.get(url)\n    const statusCode = response.status\n    if (statusCode == \"200\") {\n        return response['data'] \n    } else if (statusCode == \"204\") {\n        alert(warningMsg['204'])\n        return null\n    } else {\n        alert(warningMsg['400'])\n        return null\n    } \n}\n\nasync function getNode(id){\n    const path = base_request_url+\"countyToNodes\"\n    const data = {\n        'county_id': id\n    }\n    const response = await axios.post(path, data)\n    return response \n}\n\nexport {loadMapInitialData, queryMapInfoWithNode,getNode}"]},"metadata":{},"sourceType":"module"}