{"ast":null,"code":"import _objectSpread from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as Neo4jd3 from '../js/Neo4D3';\nimport * as d3Lasso from 'd3-lasso';\nimport * as d3 from 'd3';\nimport * as KGutils from '@/utils/KGutils.js';\nimport { mapState } from 'vuex';\nimport * as d3tip from '@/utils/d3-tip';\nimport NodeRelOverview from '@/components/NodeRelOverview';\nexport default {\n  components: {\n    NodeRelOverview: NodeRelOverview\n  },\n  data: function data() {\n    return {\n      selectedEntities: [],\n      selectedRelations: [],\n      currentEntities: [],\n      currentRelations: [],\n      lassoColor: \"grey\",\n      zoomPanColor: \"green\",\n      lassoStatus: false,\n      zoomPanStatus: true,\n      lasso: null,\n      zoom: null,\n      loading_value: false,\n      tip: null,\n      user_defined_thre: 5,\n      // user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3: null,\n      brushed: {\n        \"entity_type\": [],\n        \"relationship_type\": []\n      },\n      showOverview: false,\n      showMaxRetrieve: false,\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      selectedColor: null,\n      showResThre: false,\n      // resilience threshold bar \n      resilience_thre: 0,\n      // selected threshold of resilience \n      // min_resilience: 0,\n      max_resilience: 1 // maximum value of the scroll bar for resilience threshold \n\n    };\n  },\n  created: function created() {\n    this.$store.dispatch('getGraphOverview');\n    window['d3'] = d3;\n    this.tip = d3tip().attr('class', 'd3-tip').offset([-10, 80]).html(function (d) {\n      return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    });\n    console.log(document.querySelector(\"#div_graph\"));\n  },\n  methods: {\n    changeThreshold: function changeThreshold() {\n      // change user define threshold for how many nodes we want to expand \n      this.$store.dispatch('setExpandTh', this.user_defined_thre);\n    },\n    drawNeo4jd3: function drawNeo4jd3() {\n      var that = this;\n      d3.selectAll(\".d3-tip\").remove();\n\n      if (this.neo4jd3 == null) {\n        var neo4jd3 = Neo4jd3.default('#div_graph', {\n          neo4jData: this.graphData,\n          nodeRadius: 30,\n          infoPanel: false,\n          onNodeDoubleClick: function onNodeDoubleClick(node) {// that.dbclick(node)\n          },\n          onNodeMouseEnter: function onNodeMouseEnter(node) {\n            that.hover_node = node;\n            console.log('hovering', node);\n          },\n          onNodeClick: function onNodeClick(node, idx) {\n            // console.log(node,id)\n            // Create dummy data\n            // console.log(node)\n            if (node.showBtnPanel == true) {\n              d3.select(\"#node-\".concat(node.id)).selectAll('.circle-button').remove();\n              node.showBtnPanel = false;\n              return;\n            }\n\n            node.showBtnPanel = true;\n            var data = {\n              b: {\n                action: \"remove\",\n                value: 10,\n                pos: 0\n              }\n            }; // only two operations \n\n            if (that.relationStatusReady == false) {\n              // render the loading panel \n              console.log('nononono'); //\n            } else {\n              if (that.relationStatusReady == \"fromMap\") {\n                var relation_data = node['relationship_types'];\n              } else {\n                // console.log(that.relationTypeData['results'][0]['data'][0]['graph']['nodes'])\n                // console.log(idx)\n                var filtered_relation_type_data = that.relationTypeData['results'][0]['data'][0]['graph']['nodes'].filter(function (d) {\n                  return d.id == node.id;\n                });\n                var relation_data = filtered_relation_type_data[0]['relationship_types']; // get the sum of all rel counts \n              }\n\n              var sumValues = function sumValues(obj) {\n                return Object.values(obj).reduce(function (a, b) {\n                  return a + b;\n                });\n              };\n\n              var total_c = sumValues(relation_data); // generate the dount data\n\n              for (var _i = 0, _Object$entries = Object.entries(relation_data); _i < _Object$entries.length; _i++) {\n                var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                    key = _Object$entries$_i[0],\n                    value = _Object$entries$_i[1];\n\n                data[key] = {\n                  action: key,\n                  value: value / total_c * 30\n                };\n              } // console.log(\"check data\")\n              // console.log(data)\n\n            } // sorting \n\n\n            var this_g = d3.select(\"#node-\".concat(node.id)); // let append_g = this_g.append('g').attr(\"transform\", \"translate(\" + node['x'] + \",\" + node['y'] + \")\");\n\n            var append_g = this_g; // Compute the position of each group on the pie:\n\n            var pie = d3.pie().sort(null) //avoiding to sort the pie, make sure the remove button in the same position \n            .value(function (d) {\n              return d.value.value;\n            });\n            var data_ready = pie(d3.entries(data)); // removal / expand operations \n\n            var operation_buttons_g = append_g.selectAll('whatever').data(data_ready).enter();\n            var operation_buttons = operation_buttons_g.append('path').attr('d', d3.arc().innerRadius(30) // This is the size of the donut hole\n            .outerRadius(50)).attr(\"class\", \"circle-button\").attr('fill', function (d, i) {\n              if (i == 0) {\n                return \"#BB6464\";\n              } else {\n                return \"#94B49F\";\n              }\n            }) // .attr(\"stroke\", \"black\")\n            .style(\"stroke-width\", \"2px\").style(\"stroke\", \"white\").style(\"opacity\", 0.7).style('cursor', 'pointer').attr('title', 'test');\n            var hide_icon = operation_buttons_g.append('path').attr('d', 'M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7').attr(\"transform\", 'translate(20, -35) scale(0.7)').attr(\"class\", \"circle-button\");\n            d3.select('svg').call(that.tip); // hovering effect \n\n            operation_buttons.on('mouseover', function (p) {\n              d3.select(this).style('opacity', 1);\n              var rel = p['data']['value']['action'];\n              console.log(rel);\n              that.tip.show(rel);\n            }).on('mouseout', function (p) {\n              d3.select(this).style('opacity', 0.7);\n              var rel = p['data']['value']['action'];\n              that.tip.hide(rel);\n            }).on('click', function (d, i) {\n              var clicked_node_id = node['id'];\n              var action = d.data.value.action; // console.log(d)\n\n              that.tip.hide(d.data.value.action);\n\n              if (action == \"remove\") {\n                // tip.hide(d.data.value.action)\n                that.$store.dispatch(\"node_remove\", {\n                  node_id: clicked_node_id\n                });\n              } else {\n                // console.log(d.data.value.action)\n                that.$store.dispatch(\"node_expand\", {\n                  node_id: clicked_node_id,\n                  relation: d.data.key\n                });\n              }\n            });\n          }\n        });\n        this.neo4jd3 = neo4jd3;\n      } else {\n        this.neo4jd3.updateWithNeo4jData(this.graphData);\n      }\n\n      window.neo4jd3 = this.neo4jd3;\n      window.graph = this.graphData;\n\n      if (that.lassoStatus) {\n        that.disableZoom();\n        that.enableLasso();\n      } else {\n        that.disableLasso();\n        that.enableZoomPan();\n      } // that.enableLasso()\n\n    },\n    resetGraphTableHandler: function resetGraphTableHandler() {\n      this.$store.dispatch(\"resetTableGraph\");\n    },\n    toggleZoomPanLasso: function toggleZoomPanLasso() {\n      this.zoomPanStatus = !this.zoomPanStatus;\n      this.lassoStatus = !this.lassoStatus;\n      this.zoomPanColor = this.zoomPanStatus ? \"green\" : \"grey\";\n      this.lassoColor = this.lassoStatus ? \"green\" : \"grey\";\n    },\n    zoomPanToggleHandler: function zoomPanToggleHandler() {\n      if (!this.zoomPanStatus) {\n        this.toggleZoomPanLasso();\n        this.disableLasso();\n        this.enableZoomPan();\n      }\n    },\n    lassoToggleHandler: function lassoToggleHandler() {\n      if (!this.lassoStatus) {\n        this.toggleZoomPanLasso();\n        this.disableZoom();\n        this.enableLasso(); // this.enableZoomPan()\n      }\n    },\n    enableLasso: function enableLasso() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      var circles_question = svg.selectAll('.outline');\n      var that = this;\n\n      var lasso_start = function lasso_start() {\n        // console.log(111)\n        lasso.items().attr('fill', \"green\").classed('not_possible', true).classed('selected', false);\n      };\n\n      var lasso_draw = function lasso_draw() {\n        // Style the possible dots\n        lasso.possibleItems().classed('not_possible', false).classed('possible', true); // Style the not possible dot\n\n        lasso.notPossibleItems().classed('not_possible', true).classed('possible', false);\n      };\n\n      var lasso_end = function lasso_end() {\n        lasso.items().classed('not_possible', false).classed('possible', false);\n        lasso.selectedItems().classed('selected', true);\n        that.selectedEntities.splice(0, that.selectedEntities.length);\n        that.selectedRelations.splice(0, that.selectedRelations.length);\n        lasso.selectedItems().each(function (d) {\n          var label = this.nodeName;\n\n          if (label == \"circle\") {\n            console.log(\"adding entity\" + d.id);\n            that.selectedEntities.push(d.id);\n          } else {\n            console.log(\"adding Relations\" + d.id);\n            that.selectedRelations.push(d.id);\n          }\n        }); // Reset the style of the not selected dots\n        // lasso.notSelectedItems()\n      };\n\n      var lasso = d3Lasso.lasso().closePathSelect(true).closePathDistance(100).items(circles_question).targetArea(svg).on('start', lasso_start).on('draw', lasso_draw).on('end', lasso_end);\n      svg.call(lasso);\n    },\n    disableLasso: function disableLasso() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      svg.on(\".dragstart\", null);\n      svg.on(\".drag\", null);\n      svg.on(\".dragend\", null);\n    },\n    enableZoomPan: function enableZoomPan() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      svg.call(d3.zoom().on('zoom', function () {\n        var scale = d3.event.transform.k,\n            translate = [d3.event.transform.x, d3.event.transform.y];\n        console.log(1);\n        var g = svg.select(\"g\");\n        g.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')');\n      })).on('dblclick.zoom', null);\n    },\n    disableZoom: function disableZoom() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      svg.on('.zoom', null);\n    },\n    toggleOverviewPanel: function toggleOverviewPanel(focus) {\n      if (focus == \"entity\") {\n        var containerFocus = document.querySelector(\"#div_node_overview\");\n        var containerUnFocus = document.querySelector(\"#div_link_overview\");\n        containerFocus.style.border = \"2px solid green\";\n        containerUnFocus.style.border = \"None\";\n      } else {\n        var _containerFocus = document.querySelector(\"#div_link_overview\");\n\n        var _containerUnFocus = document.querySelector(\"#div_node_overview\");\n\n        _containerFocus.style.border = \"2px solid green\";\n        _containerUnFocus.style.border = \"None\";\n      }\n    },\n    retrieve_types_nodes: function retrieve_types_nodes() {\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed);\n    },\n    circleUpdateMatchColor: function circleUpdateMatchColor() {\n      var _this = this;\n\n      if (this.colorMapping) {\n        Object.keys(this.colorMapping).forEach(function (category) {\n          d3.selectAll('.' + category).style('fill', _this.colorMapping[category]);\n        });\n      }\n    },\n    recolorNode: function recolorNode() {\n      var that = this;\n      d3.select('#div_graph').selectAll('circle').style('fill', function (d) {\n        // check cold chain data\n        if ('resilience' in d['properties']) {\n          console.log(d['properties']);\n\n          if (d['properties']['resilience'] >= that.resilience_thre) {\n            if (that.selectedColor) {\n              return that.selectedColor.hex;\n            } else {\n              return \"#78b3d0\";\n            }\n          } else {\n            return \"#b3b3b3\";\n          }\n        }\n      });\n    }\n  },\n  watch: {\n    selectedColor: function selectedColor() {\n      this.recolorNode(); // d3.selectAll('circle').style('fill', this.selectedColor.hex)\n    },\n    resilience_thre: function resilience_thre() {\n      this.recolorNode();\n    },\n    graphData: function graphData() {\n      var all_resilience = [];\n      console.log(this.graphData);\n      this.graphData['results'][0]['data'][0]['graph']['nodes'].forEach(function (d) {\n        d['status'] = 'unclicked'; // check if this is cold chain data or not \n\n        if (\"resilience\" in d['properties']) {\n          all_resilience.push(parseFloat(d['properties']['resilience']));\n        }\n      }); // this.min_resilience = d3.min(all_resilience)\n\n      this.max_resilience = d3.max(all_resilience);\n      console.log(this.max_resilience); //inital the selected resilience\n\n      KGutils.graphDataParsing(this.graphData, this.currentEntities, this.currentRelations);\n      this.drawNeo4jd3();\n      this.circleUpdateMatchColor();\n    },\n    selectedEntities: function selectedEntities(val) {\n      if (val.length > 0) {\n        console.log(\"retrieving data now!!!\");\n        console.log(val.length);\n        console.log(this.selectedEntities);\n        console.log(this.selectedRelations);\n        console.log(\"****************\");\n        console.log(val);\n        this.$store.dispatch(\"retrieveSubTable\", {\n          entities: this.selectedEntities,\n          relations: this.selectedRelations\n        });\n        this.$store.dispatch(\"retrieveNodeGeo\", {\n          node: this.selectedEntities\n        });\n      }\n    },\n    selectedRelations: function selectedRelations(val) {\n      if (val.length > 0) {\n        console.log(\"****************\");\n        console.log(val.length);\n        console.log(val);\n        console.log(\"retrieving data now!!!\");\n        console.log(this.selectedEntities);\n        console.log(this.selectedRelations);\n        this.$store.dispatch(\"retrieveSubTable\", {\n          entities: this.selectedEntities,\n          relations: this.selectedRelations\n        });\n      }\n    },\n    brushed: {\n      handler: function handler(val) {\n        console.log(val);\n      },\n      deep: true\n    },\n    relationStatusReady: function relationStatusReady(val) {\n      console.log(\"relation status: \" + val);\n    },\n    relationTypeData: function relationTypeData(val) {\n      if (this.relationStatusReady) {\n        console.log(\"relation type data is ready\");\n      } else {\n        console.log(\"relation type data is not ready yet!\");\n      }\n    },\n    loading: function loading(val) {\n      this.loading_value = val;\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(['graphData', 'relationStatusReady', 'relationTypeData', 'loading', 'graphOverview', 'colorMapping'])), {}, {\n    HEIGHT: function HEIGHT() {\n      return window.innerHeight * 0.7 + 'px';\n    },\n    OVERVIEW_HEIGHT: function OVERVIEW_HEIGHT() {\n      return window.innerHeight * 0.3 + 'px';\n    }\n  })\n};","map":{"version":3,"mappings":"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","names":["components","NodeRelOverview","data","selectedEntities","selectedRelations","currentEntities","currentRelations","lassoColor","zoomPanColor","lassoStatus","zoomPanStatus","lasso","zoom","loading_value","tip","user_defined_thre","neo4jd3","brushed","showOverview","showMaxRetrieve","fav","menu","message","hints","selectedColor","showResThre","resilience_thre","max_resilience","created","window","attr","offset","html","console","methods","changeThreshold","drawNeo4jd3","d3","neo4jData","nodeRadius","infoPanel","onNodeDoubleClick","onNodeMouseEnter","that","onNodeClick","node","b","action","value","pos","sort","data_ready","enter","innerRadius","outerRadius","style","operation_buttons","on","node_id","relation","resetGraphTableHandler","toggleZoomPanLasso","zoomPanToggleHandler","lassoToggleHandler","enableLasso","classed","closePathSelect","closePathDistance","items","circles_question","targetArea","svg","lasso_start","lasso_draw","lasso_end","disableLasso","enableZoomPan","translate","g","disableZoom","toggleOverviewPanel","focus","containerFocus","containerUnFocus","retrieve_types_nodes","circleUpdateMatchColor","Object","recolorNode","watch","graphData","d","all_resilience","KGutils","val","entities","relations","handler","deep","relationStatusReady","relationTypeData","loading","computed","mapState","HEIGHT","OVERVIEW_HEIGHT"],"sourceRoot":"src/components","sources":["KgViewer.vue"],"sourcesContent":["<template>\n    <div class=\"fullHeight\" style=\"position:relative\">\n        <div\n          class=\"graph-btn-container\"\n        >\n        <v-container>\n        <v-row no-gutters\n          justify='space-between'\n        >\n          <v-col\n            key=\"0\"\n            sm=\"3\"\n            cols=\"11\"\n            >\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"resetGraphTableHandler\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-refresh\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Reset</span>\n            </v-tooltip>\n            <!-- <v-btn\n              small\n              class=\"kg-view-btn\"\n              @click=\"resetGraphTableHandler\"\n              >\n              Reset\n            </v-btn> -->\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  :color=\"zoomPanColor\"\n                  @click=\"zoomPanToggleHandler\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-arrow-expand-all\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>ZOOM</span>\n            </v-tooltip>\n\n            \n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  :color=\"lassoColor\"\n                  @click=\"lassoToggleHandler\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-lasso\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>LASSO</span>\n            </v-tooltip>\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"showOverview = !showOverview\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-chart-bar\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Node Link Overview</span>\n            </v-tooltip>\n\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"showMaxRetrieve = !showMaxRetrieve\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-soundbar\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Maximum Retrieval #</span>\n            </v-tooltip>\n            \n            <v-menu\n              v-model=\"menu\"\n              :close-on-content-click=\"false\"\n              :nudge-width=\"200\"\n              offset-x\n            > \n              <template v-slot:activator=\"{ on: menu, attrs }\">\n              <v-tooltip bottom>\n                <template v-slot:activator=\"{ on: tooltip}\">\n                  <v-btn \n                    class=\"ma-2 menu-btn\"\n                    icon\n                    text \n                  >\n                    <v-icon\n                      v-bind=\"attrs\"\n                      v-on=\"{ ...tooltip, ...menu }\"\n                      :style=\"{color: selectedColor?selectedColor.hex:'green'}\"\n                    >\n                      mdi-palette\n                    </v-icon>\n                  </v-btn>\n                </template>\n                <span>Color Picker</span>\n              </v-tooltip>\n              </template>\n              <v-card>\n                <v-color-picker\n                  class=\"ma-2\"\n                  show-swatches\n                  swatches-max-height=\"300px\"\n                  v-model = \"selectedColor\"\n                ></v-color-picker>\n              </v-card>\n            </v-menu>\n            \n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"showResThre = !showResThre\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-soundbar\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Resilience Threshold #</span>\n            </v-tooltip>\n            \n            <v-slider\n              v-model=\"user_defined_thre\"\n              :thumb-size=\"24\"\n              @click=\"changeThreshold\"\n              max=\"1000\"\n              thumb-label=\"always\"\n              v-show=\"showMaxRetrieve\"\n            ></v-slider>\n\n            <v-slider\n              v-model=\"resilience_thre\"\n              :thumb-size=\"24\"\n              min=\"0\"\n              step=\"0.00001\"\n              :max = max_resilience\n              thumb-label=\"always\"\n              v-show=\"showResThre\"\n            ></v-slider>\n           \n          </v-col>\n        </v-row>\n        </v-container>\n        </div>\n        <node-rel-overview\n          v-show=\"showOverview\"\n          :graphOverview=\"graphOverview\"\n        />\n        <div id=\"div_graph\" class=\"fullHeight\" :style=\"{'height': HEIGHT}\"></div>   \n        <v-overlay :value=\"loading_value\">\n        <v-progress-circular\n          indeterminate\n          size=\"64\"\n        ></v-progress-circular>\n      </v-overlay>\n    </div>\n</template>\n\n<script>\nimport * as Neo4jd3 from '../js/Neo4D3'\nimport * as d3Lasso from 'd3-lasso'\nimport * as d3 from 'd3'\nimport * as KGutils from '@/utils/KGutils.js'\nimport {mapState} from 'vuex'\nimport * as d3tip from '@/utils/d3-tip'\nimport NodeRelOverview from '@/components/NodeRelOverview'\nexport default{\n  components: {\n    NodeRelOverview\n  },\n  data () {\n    return {\n      selectedEntities: [], \n      selectedRelations: [],\n      currentEntities: [], \n      currentRelations: [],\n      lassoColor: \"grey\", \n      zoomPanColor: \"green\", \n      lassoStatus: false,\n      zoomPanStatus: true, \n      lasso: null, \n      zoom: null, \n      loading_value:false,\n      tip: null,\n      user_defined_thre: 5,// user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3 : null,\n      brushed: {\"entity_type\": [], \"relationship_type\": []},\n      showOverview:false, \n      showMaxRetrieve:false,\n      fav: true,\n      menu: false,\n      message: false,\n      hints: true,\n      selectedColor: null, \n      showResThre: false, // resilience threshold bar \n      resilience_thre: 0,  // selected threshold of resilience \n      // min_resilience: 0,\n      max_resilience: 1, // maximum value of the scroll bar for resilience threshold \n    }\n  },\n  created () {\n    this.$store.dispatch('getGraphOverview')\n    window['d3'] = d3\n    this.tip = d3tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 80])\n            .html(function(d) {\n              return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    })\n    console.log(document.querySelector(\"#div_graph\"));\n    \n  },\n  methods: {\n    changeThreshold(){\n      // change user define threshold for how many nodes we want to expand \n      this.$store.dispatch('setExpandTh', this.user_defined_thre)\n    },\n    drawNeo4jd3 () {\n      var that = this\n      d3.selectAll(\".d3-tip\").remove()\n\n\n      if(this.neo4jd3 == null){\n        var neo4jd3 = Neo4jd3.default('#div_graph', {\n          neo4jData: this.graphData,\n          nodeRadius: 30,\n          infoPanel: false,\n\n          onNodeDoubleClick: function (node) {\n            // that.dbclick(node)\n          },\n          onNodeMouseEnter: function (node) {\n            that.hover_node = node\n            console.log('hovering', node)\n          },\n          onNodeClick: function (node,idx) {\n            // console.log(node,id)\n            // Create dummy data\n            // console.log(node)\n            if (node.showBtnPanel == true) {\n              d3.select(`#node-${node.id}`).selectAll('.circle-button').remove()\n              node.showBtnPanel = false\n              return\n            }\n            node.showBtnPanel = true \n            var data = { b: {action: \"remove\", value: 10, pos:0} } // only two operations \n\n            if(that.relationStatusReady==false){\n              // render the loading panel \n              console.log('nononono')\n              //\n            }else{\n              if(that.relationStatusReady==\"fromMap\"){\n              var relation_data = node['relationship_types']\n            }\n            else{\n              // console.log(that.relationTypeData['results'][0]['data'][0]['graph']['nodes'])\n              // console.log(idx)\n              var filtered_relation_type_data = that.relationTypeData['results'][0]['data'][0]['graph']['nodes'].filter(d => d.id == node.id)\n              var relation_data = filtered_relation_type_data[0]['relationship_types']\n              // get the sum of all rel counts \n            }\n            const sumValues = obj => Object.values(obj).reduce((a, b) => a + b);\n              const total_c  = sumValues(relation_data)\n              // generate the dount data\n              for (const [key, value] of Object.entries(relation_data)) {\n                data[key] = {action: key, value: (value/total_c)*30}\n              }\n              // console.log(\"check data\")\n              // console.log(data)\n            } \n            \n            // sorting \n            \n            let this_g = d3.select(`#node-${node.id}`)\n\n            // let append_g = this_g.append('g').attr(\"transform\", \"translate(\" + node['x'] + \",\" + node['y'] + \")\");\n            let append_g = this_g\n\n              // Compute the position of each group on the pie:\n            var pie = d3.pie()\n              .sort(null) //avoiding to sort the pie, make sure the remove button in the same position \n              .value(function(d) {return d.value.value; })\n            var data_ready = pie(d3.entries(data))\n            \n\n      \n              // removal / expand operations \n            var operation_buttons_g = append_g.selectAll('whatever')\n              .data(data_ready)\n              .enter()\n            \n            var operation_buttons = operation_buttons_g.append('path')\n              .attr('d', d3.arc()\n                .innerRadius(30)         // This is the size of the donut hole\n                .outerRadius(50)\n              )\n              .attr(\"class\", \"circle-button\")\n              .attr('fill', function(d,i){ \n                if(i==0){\n                  return \"#BB6464\"\n                }else{\n                  return \"#94B49F\"\n                } \n              })\n              // .attr(\"stroke\", \"black\")\n              .style(\"stroke-width\", \"2px\")\n              .style(\"stroke\", \"white\")\n              .style(\"opacity\", 0.7)\n              .style('cursor','pointer')\n              .attr('title','test')\n\n            var hide_icon = operation_buttons_g.append('path') \n              .attr('d', 'M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7')\n              .attr(\"transform\", 'translate(20, -35) scale(0.7)')\n              .attr(\"class\", \"circle-button\")\n            \n            \n\n            d3.select('svg').call(that.tip)\n              // hovering effect \n            operation_buttons.on('mouseover', function(p){\n                d3.select(this).style('opacity',1)\n                let rel = p['data']['value']['action']\n                console.log(rel)\n                that.tip.show(rel);\n              })\n              .on('mouseout',function(p){\n                d3.select(this).style('opacity',0.7)\n                let rel = p['data']['value']['action']\n                that.tip.hide(rel);\n              })\n              .on('click', function(d,i){\n                let clicked_node_id = node['id']\n                const action = d.data.value.action \n                // console.log(d)\n                that.tip.hide(d.data.value.action)\n                if (action == \"remove\"){\n                  // tip.hide(d.data.value.action)\n                  that.$store.dispatch(\"node_remove\", {node_id: clicked_node_id})\n                }else {\n                  \n                  // console.log(d.data.value.action)\n                  that.$store.dispatch(\"node_expand\", {node_id: clicked_node_id, relation: d.data.key})\n                }\n              })\n          }\n      })\n        this.neo4jd3 = neo4jd3\n      }else{\n        this.neo4jd3.updateWithNeo4jData(this.graphData)\n      }\n\n      window.neo4jd3 = this.neo4jd3\n      window.graph = this.graphData\n      if (that.lassoStatus) {\n        that.disableZoom()\n        that.enableLasso()\n      } else {\n        that.disableLasso() \n        that.enableZoomPan()\n      }\n      // that.enableLasso()\n      \n    },\n    resetGraphTableHandler(){\n      this.$store.dispatch(\"resetTableGraph\")\n    },\n    toggleZoomPanLasso(){\n      this.zoomPanStatus = !this.zoomPanStatus \n      this.lassoStatus = !this.lassoStatus\n      this.zoomPanColor = this.zoomPanStatus?\"green\":\"grey\"\n      this.lassoColor = this.lassoStatus?\"green\":\"grey\"\n    }, \n    zoomPanToggleHandler() {\n      if (!this.zoomPanStatus) {\n        this.toggleZoomPanLasso() \n        this.disableLasso()\n        this.enableZoomPan()\n      }\n      \n    }, \n    lassoToggleHandler(){\n      if (!this.lassoStatus) {\n        this.toggleZoomPanLasso()\n        this.disableZoom()\n        this.enableLasso()\n        // this.enableZoomPan()\n      }\n      \n    },\n    enableLasso(){\n      const svg = d3.select('#div_graph').select(\"svg\")\n      var circles_question = svg.selectAll('.outline')\n      let that = this\n      var lasso_start = function () {\n        // console.log(111)\n        lasso.items()\n          .attr('fill', \"green\")\n          .classed('not_possible', true)\n          .classed('selected', false)\n      }\n      var lasso_draw = function () {\n        // Style the possible dots\n        lasso.possibleItems()\n          .classed('not_possible', false)\n          .classed('possible', true)\n\n        // Style the not possible dot\n        lasso.notPossibleItems()\n          .classed('not_possible', true)\n          .classed('possible', false)\n      }\n      var lasso_end = function () {\n        lasso.items()\n          .classed('not_possible', false)\n          .classed('possible', false)\n\n        lasso.selectedItems()\n          .classed('selected', true)\n        that.selectedEntities.splice(0, that.selectedEntities.length)\n        that.selectedRelations.splice(0, that.selectedRelations.length) \n        lasso.selectedItems().each(function(d){\n          const label = this.nodeName \n          \n          if (label == \"circle\") {\n            console.log(\"adding entity\" + d.id)\n            that.selectedEntities.push(d.id)\n          }else {\n            console.log(\"adding Relations\" + d.id)\n            that.selectedRelations.push(d.id)\n          }\n          \n        })\n        // Reset the style of the not selected dots\n        // lasso.notSelectedItems()\n        \n      }\n      var lasso = d3Lasso.lasso()\n        .closePathSelect(true)\n        .closePathDistance(100)\n        .items(circles_question)\n        .targetArea(svg)\n        .on('start', lasso_start)\n        .on('draw', lasso_draw)\n        .on('end', lasso_end)\n\n      svg.call(lasso)\n    }, \n    disableLasso() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on(\".dragstart\", null);\n      svg.on(\".drag\", null);\n      svg.on(\".dragend\", null);\n    }, \n    enableZoomPan(){\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.call(d3.zoom().on('zoom', function () {\n        var scale = d3.event.transform.k,\n          translate = [d3.event.transform.x, d3.event.transform.y]\n        console.log(1)\n        const g = svg.select(\"g\")\n        g.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')')\n      }))\n      .on('dblclick.zoom', null)\n    },\n    disableZoom() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on('.zoom', null)\n    },\n    toggleOverviewPanel(focus){\n      if (focus == \"entity\") {\n        const containerFocus = document.querySelector(\"#div_node_overview\")\n        const containerUnFocus = document.querySelector(\"#div_link_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      } else{\n        const containerFocus = document.querySelector(\"#div_link_overview\")\n        const containerUnFocus = document.querySelector(\"#div_node_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      }\n    },\n    retrieve_types_nodes(){\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed)\n    },\n    circleUpdateMatchColor(){\n      if (this.colorMapping) {\n        Object.keys(this.colorMapping).forEach(category => {\n          d3.selectAll('.'+category).style('fill', this.colorMapping[category])\n        })\n      }\n    },\n    recolorNode(){\n      var that = this\n      d3.select('#div_graph').selectAll('circle').style('fill',function(d){\n      // check cold chain data\n        if('resilience' in d['properties']){\n          console.log(d['properties'])\n          if(d['properties']['resilience']>=that.resilience_thre){\n            if(that.selectedColor){\n              return that.selectedColor.hex\n            }else{\n              return \"#78b3d0\"\n            }\n            \n          }else{\n            return \"#b3b3b3\"\n          }\n        }\n      })\n    }\n  },\n  watch: {\n    selectedColor() {\n      this.recolorNode()\n      // d3.selectAll('circle').style('fill', this.selectedColor.hex)\n    },\n    resilience_thre(){\n      this.recolorNode()\n    },\n    graphData () {\n      var all_resilience = []\n      console.log(this.graphData)\n      this.graphData['results'][0]['data'][0]['graph']['nodes'].forEach(function (d) {\n        d['status'] = 'unclicked'\n        // check if this is cold chain data or not \n        if(\"resilience\" in d['properties']){\n          all_resilience.push(parseFloat(d['properties']['resilience']))\n        }\n        \n      })\n      // this.min_resilience = d3.min(all_resilience)\n      this.max_resilience = d3.max(all_resilience)\n      console.log(this.max_resilience)\n      //inital the selected resilience\n      KGutils.graphDataParsing(this.graphData, this.currentEntities, this.currentRelations)\n      this.drawNeo4jd3()\n      this.circleUpdateMatchColor()\n\n    }, \n    selectedEntities(val) {\n      if (val.length > 0) {\n        console.log(\"retrieving data now!!!\")\n        console.log(val.length)\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        console.log(\"****************\")\n        console.log(val)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n        this.$store.dispatch(\"retrieveNodeGeo\", {node: this.selectedEntities})\n      }\n    }, \n    selectedRelations(val){\n      if (val.length > 0) {\n        console.log(\"****************\")\n        console.log(val.length)\n        console.log(val) \n        console.log(\"retrieving data now!!!\")\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n      }\n    }, \n    brushed:{\n      handler(val){\n          console.log(val);\n      },\n      deep:true \n    },\n    relationStatusReady(val){\n      console.log(\"relation status: \" + val) \n\n    },\n    relationTypeData(val) {\n      if(this.relationStatusReady) {\n        console.log(\"relation type data is ready\")\n\n      }else{\n        console.log(\"relation type data is not ready yet!\")\n      }\n    },\n    loading(val){\n      this.loading_value = val\n    },\n    \n  },\n  computed: {\n    ...mapState(['graphData', 'relationStatusReady', 'relationTypeData','loading', 'graphOverview', 'colorMapping']),\n    HEIGHT () {\n      return window.innerHeight*0.7 + 'px'\n    },\n    OVERVIEW_HEIGHT(){\n      return window.innerHeight*0.3 + 'px'\n    }\n  }\n}\n</script>\n<style>\n\n.lasso path {\n    stroke: rgb(80,80,80);\n    stroke-width:2px;\n}\n\n.lasso .drawn {\n    fill-opacity:.05 ;\n}\n\n.lasso .loop_close {\n    fill:none;\n    stroke-dasharray: 4,4;\n}\n\n.lasso .origin {\n    fill:#3399FF;\n    fill-opacity:.5;\n}\n\n.not_possible {\n    fill: rgb(200,200,200);\n}\n\n.possible {\n    fill: #EC888C;\n}\n\n.nodes .selected {\n    fill: green!important;\n    stroke-width: 3px!important;\n    stroke: black;\n}\n.relationships .selected {\n    stroke-width: 5px !important;\n    stroke: green!important;\n}\n.graph-btn-container{\n    position: relative; \n    top: 30px;\n}\n.kg-view-btn{\n  margin-right: 10px;\n}\n\n.circle-button:hover{\n  cursor: pointer;\n}\n\n.neo4jd3{\n  margin-top:60px;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}