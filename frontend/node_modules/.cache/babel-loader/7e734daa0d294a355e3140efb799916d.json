{"ast":null,"code":"import _objectSpread from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as Neo4jd3 from '@/js/Neo4D3';\nimport * as d3Lasso from 'd3-lasso';\nimport * as d3 from 'd3';\nimport * as KGutils from '@/utils/KGutils.js';\nimport { mapState } from 'vuex';\nimport * as d3tip from '@/utils/d3-tip';\nexport default {\n  components: {},\n  data: function data() {\n    return {\n      selectedEntities: [],\n      selectedRelations: [],\n      currentEntities: [],\n      currentRelations: [],\n      lassoColor: \"grey\",\n      zoomPanColor: \"green\",\n      lassoStatus: false,\n      zoomPanStatus: true,\n      lasso: null,\n      zoom: null,\n      loading_value: false,\n      tip: null,\n      user_defined_thre: 5,\n      // user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3: null,\n      brushed: {\n        \"entity_type\": [],\n        \"relationship_type\": []\n      }\n    };\n  },\n  created: function created() {\n    this.$store.dispatch('getGraphOverview');\n    window['d3'] = d3;\n    this.tip = d3tip().attr('class', 'd3-tip').offset([-10, 80]).html(function (d) {\n      return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    });\n    console.log(document.querySelector(\"#div_graph\"));\n  },\n  methods: {\n    changeThreshold: function changeThreshold() {\n      // change user define threshold for how many nodes we want to expand \n      this.$store.dispatch('setExpandTh', this.user_defined_thre);\n    },\n    drawNeo4jd3: function drawNeo4jd3() {\n      var that = this;\n      d3.selectAll(\".d3-tip\").remove();\n\n      if (this.neo4jd3 == null) {\n        var neo4jd3 = Neo4jd3.default('#div_graph', {\n          neo4jData: this.graphData,\n          nodeRadius: 30,\n          infoPanel: false,\n          onNodeDoubleClick: function onNodeDoubleClick(node) {// that.dbclick(node)\n          },\n          onNodeMouseEnter: function onNodeMouseEnter(node) {\n            that.hover_node = node;\n          },\n          onNodeClick: function onNodeClick(node, idx) {\n            // console.log(node,id)\n            // Create dummy data\n            console.log(node);\n\n            if (node.showBtnPanel == true) {\n              d3.select(\"#node-\".concat(node.id)).selectAll('.circle-button').remove();\n              node.showBtnPanel = false;\n              return;\n            }\n\n            node.showBtnPanel = true;\n            var data = {\n              b: {\n                action: \"remove\",\n                value: 10,\n                pos: 0\n              }\n            }; // only two operations \n\n            if (that.relationStatusReady == false) {\n              // render the loading panel \n              console.log('nononono'); //\n            } else {\n              console.log(that.relationTypeData['results'][0]['data'][0]['graph']['nodes']);\n              console.log(idx);\n              var filtered_relation_type_data = that.relationTypeData['results'][0]['data'][0]['graph']['nodes'].filter(function (d) {\n                return d.id == node.id;\n              });\n              var relation_data = filtered_relation_type_data[0]['relationship_types']; // get the sum of all rel counts \n\n              var sumValues = function sumValues(obj) {\n                return Object.values(obj).reduce(function (a, b) {\n                  return a + b;\n                });\n              };\n\n              var total_c = sumValues(relation_data); // generate the dount data\n\n              for (var _i = 0, _Object$entries = Object.entries(relation_data); _i < _Object$entries.length; _i++) {\n                var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                    key = _Object$entries$_i[0],\n                    value = _Object$entries$_i[1];\n\n                data[key] = {\n                  action: key,\n                  value: value / total_c * 30\n                };\n              }\n\n              console.log(\"check data\");\n              console.log(data);\n            } // sorting \n\n\n            var this_g = d3.select(\"#node-\".concat(node.id)); // let append_g = this_g.append('g').attr(\"transform\", \"translate(\" + node['x'] + \",\" + node['y'] + \")\");\n\n            var append_g = this_g; // Compute the position of each group on the pie:\n\n            var pie = d3.pie().sort(null) //avoiding to sort the pie, make sure the remove button in the same position \n            .value(function (d) {\n              return d.value.value;\n            });\n            var data_ready = pie(d3.entries(data)); // removal / expand operations \n\n            var operation_buttons_g = append_g.selectAll('whatever').data(data_ready).enter();\n            var operation_buttons = operation_buttons_g.append('path').attr('d', d3.arc().innerRadius(30) // This is the size of the donut hole\n            .outerRadius(50)).attr(\"class\", \"circle-button\").attr('fill', function (d, i) {\n              if (i == 0) {\n                return \"#BB6464\";\n              } else {\n                return \"#94B49F\";\n              }\n            }) // .attr(\"stroke\", \"black\")\n            .style(\"stroke-width\", \"2px\").style(\"stroke\", \"white\").style(\"opacity\", 0.7).style('cursor', 'pointer').attr('title', 'test');\n            var hide_icon = operation_buttons_g.append('path').attr('d', 'M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7').attr(\"transform\", 'translate(20, -35) scale(0.7)').attr(\"class\", \"circle-button\");\n            d3.select('svg').call(that.tip); // hovering effect \n\n            operation_buttons.on('mouseover', function (p) {\n              d3.select(this).style('opacity', 1);\n              var rel = p['data']['value']['action'];\n              console.log(rel);\n              that.tip.show(rel);\n            }).on('mouseout', function (p) {\n              d3.select(this).style('opacity', 0.7);\n              var rel = p['data']['value']['action'];\n              that.tip.hide(rel);\n            }).on('click', function (d, i) {\n              var clicked_node_id = node['id'];\n              var action = d.data.value.action;\n              console.log(d);\n              that.tip.hide(d.data.value.action);\n\n              if (action == \"remove\") {\n                // tip.hide(d.data.value.action)\n                that.$store.dispatch(\"node_remove\", {\n                  node_id: clicked_node_id\n                });\n              } else {\n                console.log(d.data.value.action);\n                that.$store.dispatch(\"node_expand\", {\n                  node_id: clicked_node_id,\n                  relation: d.data.key\n                });\n              }\n            });\n          }\n        });\n        this.neo4jd3 = neo4jd3;\n      } else {\n        this.neo4jd3.updateWithNeo4jData(this.graphData);\n      }\n\n      window.neo4jd3 = this.neo4jd3;\n      window.graph = this.graphData;\n\n      if (that.lassoStatus) {\n        that.disableZoom();\n        that.enableLasso();\n      } else {\n        that.disableLasso();\n        that.enableZoomPan();\n      } // that.enableLasso()\n\n    },\n    resetGraphTableHandler: function resetGraphTableHandler() {\n      this.$store.dispatch(\"resetTableGraph\");\n    },\n    toggleZoomPanLasso: function toggleZoomPanLasso() {\n      this.zoomPanStatus = !this.zoomPanStatus;\n      this.lassoStatus = !this.lassoStatus;\n      this.zoomPanColor = this.zoomPanStatus ? \"green\" : \"grey\";\n      this.lassoColor = this.lassoStatus ? \"green\" : \"grey\";\n    },\n    zoomPanToggleHandler: function zoomPanToggleHandler() {\n      if (!this.zoomPanStatus) {\n        this.toggleZoomPanLasso();\n        this.disableLasso();\n        this.enableZoomPan();\n      }\n    },\n    lassoToggleHandler: function lassoToggleHandler() {\n      if (!this.lassoStatus) {\n        this.toggleZoomPanLasso();\n        this.disableZoom();\n        this.enableLasso(); // this.enableZoomPan()\n      }\n    },\n    enableLasso: function enableLasso() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      var circles_question = svg.selectAll('.outline');\n      var that = this;\n\n      var lasso_start = function lasso_start() {\n        console.log(111);\n        lasso.items().attr('fill', \"green\").classed('not_possible', true).classed('selected', false);\n      };\n\n      var lasso_draw = function lasso_draw() {\n        // Style the possible dots\n        lasso.possibleItems().classed('not_possible', false).classed('possible', true); // Style the not possible dot\n\n        lasso.notPossibleItems().classed('not_possible', true).classed('possible', false);\n      };\n\n      var lasso_end = function lasso_end() {\n        lasso.items().classed('not_possible', false).classed('possible', false);\n        lasso.selectedItems().classed('selected', true);\n        that.selectedEntities.splice(0, that.selectedEntities.length);\n        that.selectedRelations.splice(0, that.selectedRelations.length);\n        lasso.selectedItems().each(function (d) {\n          var label = this.nodeName;\n\n          if (label == \"circle\") {\n            console.log(\"adding entity\" + d.id);\n            that.selectedEntities.push(d.id);\n          } else {\n            console.log(\"adding Relations\" + d.id);\n            that.selectedRelations.push(d.id);\n          }\n        }); // Reset the style of the not selected dots\n        // lasso.notSelectedItems()\n      };\n\n      var lasso = d3Lasso.lasso().closePathSelect(true).closePathDistance(100).items(circles_question).targetArea(svg).on('start', lasso_start).on('draw', lasso_draw).on('end', lasso_end);\n      svg.call(lasso);\n    },\n    disableLasso: function disableLasso() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      svg.on(\".dragstart\", null);\n      svg.on(\".drag\", null);\n      svg.on(\".dragend\", null);\n    },\n    enableZoomPan: function enableZoomPan() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      svg.call(d3.zoom().on('zoom', function () {\n        var scale = d3.event.transform.k,\n            translate = [d3.event.transform.x, d3.event.transform.y];\n        console.log(1);\n        var g = svg.select(\"g\");\n        g.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')');\n      })).on('dblclick.zoom', null);\n    },\n    disableZoom: function disableZoom() {\n      var svg = d3.select('#div_graph').select(\"svg\");\n      svg.on('.zoom', null);\n    },\n    drawBarChart: function drawBarChart(div, data_) {\n      // clean the data\n      var that = this;\n      var data = [];\n      var keys = Object.keys(data_);\n\n      for (var i = 0; i < keys.length; i++) {\n        data.push({\n          'key': keys[i],\n          'value': data_[keys[i]]\n        });\n      }\n\n      data.sort(function (a, b) {\n        return a.value - b.value;\n      });\n      data.reverse();\n      var margin = {\n        top: 20,\n        right: 30,\n        bottom: 90,\n        left: 70\n      },\n          margin2 = {\n        top: 230,\n        right: 30,\n        bottom: 10,\n        left: 70\n      },\n          width = window.innerWidth * (7 / 12) * 0.5 - margin.left - margin.right,\n          height = 300 - margin.top - margin.bottom,\n          height2 = 300 - margin2.top - margin2.bottom;\n      var svg = d3.select(div).append(\"svg\") // .append(\"rect\")\n      .attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n      var focus = svg.append(\"g\").attr(\"class\", \"focus\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      var context = svg.append(\"g\").attr(\"class\", \"context\").attr(\"transform\", \"translate(\" + margin2.left + \",\" + margin2.top + \")\"); // set the ranges\n\n      var x_domain = 0;\n      var temp_data = 0;\n      var x = d3.scaleBand().range([0, width]).padding(0.1);\n      var y = d3.scaleLinear().range([height, 0]); // set brushable ranges\n\n      var x2 = d3.scaleBand().range([0, width]).padding(0.1);\n      var y2 = d3.scaleLinear().range([height2, 0]);\n      var xAxis = d3.axisBottom(x).tickSize(0),\n          xAxis2 = d3.axisBottom(x2).tickSize(0),\n          yAxis = d3.axisLeft(y);\n      var brush = d3.brushX().extent([[0, 0], [width, height2]]).on(\"brush end\", brushed);\n      var bars1;\n      var bars2; // Scale the range of the data in the domains\n\n      temp_data = data;\n      x_domain = data.map(function (d) {\n        return d.key;\n      }); // console.log(x_domain)\n\n      x.domain(data.map(function (d) {\n        return d.key;\n      }));\n      y.domain([0, d3.max(data, function (d) {\n        return d.value;\n      })]);\n      x2.domain(x.domain());\n      y2.domain(y.domain());\n      var temp_rt = drawBar1(focus, data);\n      var bars1 = temp_rt[0];\n      var bar1bars = temp_rt[1];\n      var bar1x = temp_rt[2];\n      var bar1y = temp_rt[3];\n      var bars2 = context.selectAll(\"rect\").data(data).enter().append(\"rect\");\n      bars2.attr(\"class\", \"bar\").attr(\"x\", function (d) {\n        return x2(d.key);\n      }).attr(\"y\", function (d) {\n        return y2(d.value);\n      }).attr(\"width\", x2.bandwidth()).attr(\"height\", function (d) {\n        return height2 - y2(d.value);\n      }).attr('fill', 'steelblue');\n      focus.append(\"path\").datum(data).attr(\"class\", \"bar\").attr(\"d\", bars1);\n      context.append(\"path\").datum(data).attr(\"class\", \"bar\").attr(\"d\", bars2);\n      context.append(\"g\").attr(\"class\", \"axis axis--x\").attr(\"transform\", \"translate(0,\" + height2 + \")\"); // .call(xAxis2);\n\n      context.append(\"g\").attr(\"class\", \"brush\").call(brush).call(brush.move, x.range());\n      svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr('fill', 'none');\n\n      function drawBar1(focus, data) {\n        bars1 = focus.selectAll(\"rect\").data(data).enter().append(\"rect\");\n        bar1bars = bars1.attr(\"class\", \"bar\").attr(\"x\", function (d) {\n          return x(d.key);\n        }).attr(\"y\", function (d) {\n          return y(d.value);\n        }).attr(\"width\", x.bandwidth()).attr(\"height\", function (d) {\n          return height - y(d.value);\n        }).attr('fill', 'steelblue');\n        bar1x = focus.append(\"g\").attr(\"class\", \"axis axis--x\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis).selectAll(\"text\") // NAME \n        .style(\"text-anchor\", \"start\").attr(\"dx\", \"+.8em\").attr(\"dy\", \"+.1em\").attr(\"transform\", \"rotate(-90)\");\n        bar1y = focus.append(\"g\").attr(\"class\", \"axis axis--y\").call(yAxis); // Create the Focus Y Axis Text Label\n\n        focus.append(\"text\").style(\"font\", \"10px arial\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - height / 2).attr(\"dy\", \"2em\").style(\"text-anchor\", \"middle\").text(\"Frequency\");\n        return [bars1, bar1bars, bar1x, bar1y];\n      }\n\n      function brushed() {\n        if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; // ignore brush-by-zoom\n\n        bar1bars.remove();\n        bar1x.remove();\n        bar1y.remove();\n        var s = d3.event.selection || x2.range();\n        var temp_domain = x_domain.slice(Math.round(s[0] / x2.step()), Math.round(s[1] / x2.step()));\n        x.domain(temp_domain);\n        console.log(temp_domain);\n        var container = d3.select(this).node().parentElement.parentElement.parentElement.id;\n\n        if (container == \"div_node_overview\") {\n          that.brushed['entity_type'] = temp_domain;\n          that.brushed['relationship_type'] = [];\n          that.toggleOverviewPanel(\"entity\");\n        } else if (container == \"div_link_overview\") {\n          that.brushed['relationship_type'] = temp_domain;\n          that.brushed['entity_type'] = [];\n          that.toggleOverviewPanel(\"relationship\");\n        } else {\n          alert(\"error finding container\");\n        }\n\n        var new_temp_data = temp_data.slice(Math.round(s[0] / x2.step()), Math.round(s[1] / x2.step()));\n        var temp_rt = drawBar1(focus, new_temp_data);\n        bars1 = temp_rt[0];\n        bar1bars = temp_rt[1];\n        bar1x = temp_rt[2];\n        bar1y = temp_rt[3];\n        focus.select(\"bar\").attr(\"d\", bars1);\n        focus.select(\"axis axis--x\").call(xAxis);\n      }\n    },\n    toggleOverviewPanel: function toggleOverviewPanel(focus) {\n      if (focus == \"entity\") {\n        var containerFocus = document.querySelector(\"#div_node_overview\");\n        var containerUnFocus = document.querySelector(\"#div_link_overview\");\n        containerFocus.style.border = \"2px solid green\";\n        containerUnFocus.style.border = \"None\";\n      } else {\n        var _containerFocus = document.querySelector(\"#div_link_overview\");\n\n        var _containerUnFocus = document.querySelector(\"#div_node_overview\");\n\n        _containerFocus.style.border = \"2px solid green\";\n        _containerUnFocus.style.border = \"None\";\n      }\n    },\n    retrieve_types_nodes: function retrieve_types_nodes() {\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed);\n    }\n  },\n  watch: {\n    graphOverview: function graphOverview() {\n      console.log('tuymeieeeeee', this.graphOverview);\n      var node_overview_data = this.graphOverview['data']['entity'];\n      var link_overview_data = this.graphOverview['data']['relationship'];\n      console.log('fff', node_overview_data, link_overview_data);\n      this.drawBarChart('#div_link_overview', link_overview_data);\n      this.drawBarChart('#div_node_overview', node_overview_data);\n    },\n    graphData: function graphData() {\n      console.log(this.graphData);\n      this.graphData['results'][0]['data'][0]['graph']['nodes'].forEach(function (d) {\n        d['status'] = 'unclicked';\n      });\n      console.log(\"check graph data\");\n      console.log(this.graphData);\n      KGutils.graphDataParsing(this.graphData, this.currentEntities, this.currentRelations);\n      this.drawNeo4jd3();\n    },\n    selectedEntities: function selectedEntities(val) {\n      if (val.length > 0) {\n        console.log(\"retrieving data now!!!\");\n        console.log(val.length);\n        console.log(this.selectedEntities);\n        console.log(this.selectedRelations);\n        console.log(\"****************\");\n        console.log(val);\n        this.$store.dispatch(\"retrieveSubTable\", {\n          entities: this.selectedEntities,\n          relations: this.selectedRelations\n        });\n        this.$store.dispatch(\"retrieveNodeGeo\", {\n          node: this.selectedEntities\n        });\n      }\n    },\n    selectedRelations: function selectedRelations(val) {\n      if (val.length > 0) {\n        console.log(\"****************\");\n        console.log(val.length);\n        console.log(val);\n        console.log(\"retrieving data now!!!\");\n        console.log(this.selectedEntities);\n        console.log(this.selectedRelations);\n        this.$store.dispatch(\"retrieveSubTable\", {\n          entities: this.selectedEntities,\n          relations: this.selectedRelations\n        });\n      }\n    },\n    brushed: {\n      handler: function handler(val) {\n        console.log(val);\n      },\n      deep: true\n    },\n    relationStatusReady: function relationStatusReady(val) {\n      console.log(\"relation status: \" + val);\n    },\n    relationTypeData: function relationTypeData(val) {\n      if (this.relationStatusReady) {\n        console.log(\"relation type data is ready\");\n      } else {\n        console.log(\"relation type data is not ready yet!\");\n      }\n    },\n    loading: function loading(val) {\n      this.loading_value = val;\n    }\n  },\n  beforeMounted: function beforeMounted() {},\n  mounted: function mounted() {},\n  computed: _objectSpread(_objectSpread({}, mapState(['graphData', 'relationStatusReady', 'relationTypeData', 'loading', 'graphOverview'])), {}, {\n    HEIGHT: function HEIGHT() {\n      return window.innerHeight * 0.7 + 'px';\n    },\n    OVERVIEW_HEIGHT: function OVERVIEW_HEIGHT() {\n      return window.innerHeight * 0.3 + 'px';\n    }\n  })\n};","map":{"version":3,"mappings":"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","names":["components","data","selectedEntities","selectedRelations","currentEntities","currentRelations","lassoColor","zoomPanColor","lassoStatus","zoomPanStatus","lasso","zoom","loading_value","tip","user_defined_thre","neo4jd3","brushed","created","window","attr","offset","html","console","methods","changeThreshold","drawNeo4jd3","d3","neo4jData","nodeRadius","infoPanel","onNodeDoubleClick","onNodeMouseEnter","that","onNodeClick","node","b","action","value","pos","sort","data_ready","enter","innerRadius","outerRadius","style","operation_buttons","on","node_id","relation","resetGraphTableHandler","toggleZoomPanLasso","zoomPanToggleHandler","lassoToggleHandler","enableLasso","classed","closePathSelect","closePathDistance","items","circles_question","targetArea","svg","lasso_start","lasso_draw","lasso_end","disableLasso","enableZoomPan","translate","g","disableZoom","drawBarChart","div","data_","top","right","bottom","left","margin2","width","height","height2","xAxis2","yAxis","extent","temp_data","x_domain","x","y","x2","y2","bars2","focus","datum","bars1","context","call","brush","bar1bars","bar1x","xAxis","selectAll","bar1y","text","alert","toggleOverviewPanel","containerFocus","containerUnFocus","retrieve_types_nodes","watch","graphOverview","graphData","d","KGutils","val","entities","relations","handler","deep","relationStatusReady","relationTypeData","loading","beforeMounted","mounted","computed","mapState","HEIGHT","OVERVIEW_HEIGHT"],"sourceRoot":"src/components/graphview","sources":["KgViewerCore.vue"],"sourcesContent":["<template>\n    <div class=\"fullHeight\" style=\"position:relative\">\n        <div\n          class=\"graph-btn-container\"\n        >\n        <v-row no-gutters\n          justify='space-between'\n        >\n          <v-col\n            key=\"0\"\n            sm=\"3\"\n            cols=2\n            >\n            <v-btn\n            small\n            class=\"kg-view-btn\"\n            @click=\"resetGraphTableHandler\"\n            >\n            Reset\n            </v-btn>\n             <v-btn\n              small\n              @click=\"zoomPanToggleHandler\"\n              :color=\"zoomPanColor\"\n              class=\"kg-view-btn\"\n            ><v-icon>\n            mdi-arrow-expand-all\n              </v-icon>\n            </v-btn>\n            <v-btn\n              small\n              class=\"kg-view-btn\"\n              @click=\"lassoToggleHandler\"\n              :color=\"lassoColor\"\n            >\n              <v-icon>\n                mdi-lasso\n              </v-icon>\n            </v-btn>\n          </v-col>\n          <v-col\n            key=\"1\"\n            cols=4\n            sm=\"3\">\n            <v-slider\n              v-model=\"user_defined_thre\"\n              :thumb-size=\"24\"\n              @click=\"changeThreshold\"\n              thumb-label=\"always\"\n            ></v-slider>\n          </v-col>\n          <v-col\n            key=\"2\"\n            cols=1\n            sm=\"3\">\n           <v-btn\n              small\n              class=\"retrieve-type-node-btn\"\n              @click=\"retrieve_types_nodes\"\n            >\n              Retrieve\n            </v-btn> \n          </v-col> \n        </v-row>\n        </div>\n        <v-row :style=\"{'height': OVERVIEW_HEIGHT, 'margin-top':'20px'}\">\n          <v-col cols=\"6\">\n            <div id=\"div_node_overview\"></div>\n          </v-col>\n          <v-col cols=\"6\">\n            <div id=\"div_link_overview\"></div>\n          </v-col>\n        </v-row>\n        <div id=\"div_graph\" class=\"fullHeight\" :style=\"{'height': HEIGHT}\"></div>   \n        <v-overlay :value=\"loading_value\">\n        <v-progress-circular\n          indeterminate\n          size=\"64\"\n        ></v-progress-circular>\n      </v-overlay>\n    </div>\n</template>\n\n<script>\nimport * as Neo4jd3 from '@/js/Neo4D3'\nimport * as d3Lasso from 'd3-lasso'\nimport * as d3 from 'd3'\nimport * as KGutils from '@/utils/KGutils.js'\nimport {mapState} from 'vuex'\nimport * as d3tip from '@/utils/d3-tip'\nexport default{\n  components: {\n\n  },\n  data () {\n    return {\n      selectedEntities: [], \n      selectedRelations: [],\n      currentEntities: [], \n      currentRelations: [],\n      lassoColor: \"grey\", \n      zoomPanColor: \"green\", \n      lassoStatus: false,\n      zoomPanStatus: true, \n      lasso: null, \n      zoom: null, \n      loading_value:false,\n      tip: null,\n      user_defined_thre: 5,// user defined threshold to show how many nodes we want to see if we expand one node \n      neo4jd3 : null,\n      brushed: {\"entity_type\": [], \"relationship_type\": []}\n    }\n  },\n  created () {\n    this.$store.dispatch('getGraphOverview')\n    window['d3'] = d3\n    this.tip = d3tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 80])\n            .html(function(d) {\n              return \"<strong>Relation: </strong>\" + d + \"<br></span>\";\n    })\n    console.log(document.querySelector(\"#div_graph\"));\n    \n  },\n  methods: {\n    changeThreshold(){\n      // change user define threshold for how many nodes we want to expand \n      this.$store.dispatch('setExpandTh', this.user_defined_thre)\n    },\n    drawNeo4jd3 () {\n      var that = this\n      d3.selectAll(\".d3-tip\").remove()\n\n\n      if(this.neo4jd3 == null){\n        var neo4jd3 = Neo4jd3.default('#div_graph', {\n          neo4jData: this.graphData,\n          nodeRadius: 30,\n          infoPanel: false,\n\n          onNodeDoubleClick: function (node) {\n            // that.dbclick(node)\n          },\n          onNodeMouseEnter: function (node) {\n            that.hover_node = node\n          },\n          onNodeClick: function (node,idx) {\n            // console.log(node,id)\n            // Create dummy data\n            console.log(node)\n            if (node.showBtnPanel == true) {\n              d3.select(`#node-${node.id}`).selectAll('.circle-button').remove()\n              node.showBtnPanel = false\n              return\n            }\n            node.showBtnPanel = true \n            var data = { b: {action: \"remove\", value: 10, pos:0} } // only two operations \n\n            if(that.relationStatusReady==false){\n              // render the loading panel \n              console.log('nononono')\n              //\n            }else{\n              console.log(that.relationTypeData['results'][0]['data'][0]['graph']['nodes'])\n              console.log(idx)\n              let filtered_relation_type_data = that.relationTypeData['results'][0]['data'][0]['graph']['nodes'].filter(d => d.id == node.id)\n              let relation_data = filtered_relation_type_data[0]['relationship_types']\n              // get the sum of all rel counts \n              const sumValues = obj => Object.values(obj).reduce((a, b) => a + b);\n              const total_c  = sumValues(relation_data)\n              // generate the dount data\n              for (const [key, value] of Object.entries(relation_data)) {\n                data[key] = {action: key, value: (value/total_c)*30}\n              }\n              console.log(\"check data\")\n              console.log(data)\n            }\n            // sorting \n            \n            let this_g = d3.select(`#node-${node.id}`)\n\n            // let append_g = this_g.append('g').attr(\"transform\", \"translate(\" + node['x'] + \",\" + node['y'] + \")\");\n            let append_g = this_g\n\n              // Compute the position of each group on the pie:\n            var pie = d3.pie()\n              .sort(null) //avoiding to sort the pie, make sure the remove button in the same position \n              .value(function(d) {return d.value.value; })\n            var data_ready = pie(d3.entries(data))\n            \n\n      \n              // removal / expand operations \n            var operation_buttons_g = append_g.selectAll('whatever')\n              .data(data_ready)\n              .enter()\n            \n            var operation_buttons = operation_buttons_g.append('path')\n              .attr('d', d3.arc()\n                .innerRadius(30)         // This is the size of the donut hole\n                .outerRadius(50)\n              )\n              .attr(\"class\", \"circle-button\")\n              .attr('fill', function(d,i){ \n                if(i==0){\n                  return \"#BB6464\"\n                }else{\n                  return \"#94B49F\"\n                } \n              })\n              // .attr(\"stroke\", \"black\")\n              .style(\"stroke-width\", \"2px\")\n              .style(\"stroke\", \"white\")\n              .style(\"opacity\", 0.7)\n              .style('cursor','pointer')\n              .attr('title','test')\n\n            var hide_icon = operation_buttons_g.append('path') \n              .attr('d', 'M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7')\n              .attr(\"transform\", 'translate(20, -35) scale(0.7)')\n              .attr(\"class\", \"circle-button\")\n            \n            \n\n            d3.select('svg').call(that.tip)\n              // hovering effect \n            operation_buttons.on('mouseover', function(p){\n                d3.select(this).style('opacity',1)\n                let rel = p['data']['value']['action']\n                console.log(rel)\n                that.tip.show(rel);\n              })\n              .on('mouseout',function(p){\n                d3.select(this).style('opacity',0.7)\n                let rel = p['data']['value']['action']\n                that.tip.hide(rel);\n              })\n              .on('click', function(d,i){\n                let clicked_node_id = node['id']\n                const action = d.data.value.action \n                console.log(d)\n                that.tip.hide(d.data.value.action)\n                if (action == \"remove\"){\n                  // tip.hide(d.data.value.action)\n                  that.$store.dispatch(\"node_remove\", {node_id: clicked_node_id})\n                }else {\n                  \n                  console.log(d.data.value.action)\n                  that.$store.dispatch(\"node_expand\", {node_id: clicked_node_id, relation: d.data.key})\n                }\n              })\n          }\n      })\n        this.neo4jd3 = neo4jd3\n      }else{\n        this.neo4jd3.updateWithNeo4jData(this.graphData)\n      }\n\n      window.neo4jd3 = this.neo4jd3\n      window.graph = this.graphData\n      if (that.lassoStatus) {\n        that.disableZoom()\n        that.enableLasso()\n      } else {\n        that.disableLasso() \n        that.enableZoomPan()\n      }\n      // that.enableLasso()\n      \n    },\n    resetGraphTableHandler(){\n      this.$store.dispatch(\"resetTableGraph\")\n    },\n    toggleZoomPanLasso(){\n      this.zoomPanStatus = !this.zoomPanStatus \n      this.lassoStatus = !this.lassoStatus\n      this.zoomPanColor = this.zoomPanStatus?\"green\":\"grey\"\n      this.lassoColor = this.lassoStatus?\"green\":\"grey\"\n    }, \n    zoomPanToggleHandler() {\n      if (!this.zoomPanStatus) {\n        this.toggleZoomPanLasso() \n        this.disableLasso()\n        this.enableZoomPan()\n      }\n      \n    }, \n    lassoToggleHandler(){\n      if (!this.lassoStatus) {\n        this.toggleZoomPanLasso()\n        this.disableZoom()\n        this.enableLasso()\n        // this.enableZoomPan()\n      }\n      \n    },\n    enableLasso(){\n      const svg = d3.select('#div_graph').select(\"svg\")\n      var circles_question = svg.selectAll('.outline')\n      let that = this\n      var lasso_start = function () {\n        console.log(111)\n        lasso.items()\n          .attr('fill', \"green\")\n          .classed('not_possible', true)\n          .classed('selected', false)\n      }\n      var lasso_draw = function () {\n        // Style the possible dots\n        lasso.possibleItems()\n          .classed('not_possible', false)\n          .classed('possible', true)\n\n        // Style the not possible dot\n        lasso.notPossibleItems()\n          .classed('not_possible', true)\n          .classed('possible', false)\n      }\n      var lasso_end = function () {\n        lasso.items()\n          .classed('not_possible', false)\n          .classed('possible', false)\n\n        lasso.selectedItems()\n          .classed('selected', true)\n        that.selectedEntities.splice(0, that.selectedEntities.length)\n        that.selectedRelations.splice(0, that.selectedRelations.length) \n        lasso.selectedItems().each(function(d){\n          const label = this.nodeName \n          \n          if (label == \"circle\") {\n            console.log(\"adding entity\" + d.id)\n            that.selectedEntities.push(d.id)\n          }else {\n            console.log(\"adding Relations\" + d.id)\n            that.selectedRelations.push(d.id)\n          }\n          \n        })\n        // Reset the style of the not selected dots\n        // lasso.notSelectedItems()\n        \n      }\n      var lasso = d3Lasso.lasso()\n        .closePathSelect(true)\n        .closePathDistance(100)\n        .items(circles_question)\n        .targetArea(svg)\n        .on('start', lasso_start)\n        .on('draw', lasso_draw)\n        .on('end', lasso_end)\n\n      svg.call(lasso)\n    }, \n    disableLasso() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on(\".dragstart\", null);\n      svg.on(\".drag\", null);\n      svg.on(\".dragend\", null);\n    }, \n    enableZoomPan(){\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.call(d3.zoom().on('zoom', function () {\n        var scale = d3.event.transform.k,\n          translate = [d3.event.transform.x, d3.event.transform.y]\n        console.log(1)\n        const g = svg.select(\"g\")\n        g.attr('transform', 'translate(' + translate[0] + ', ' + translate[1] + ') scale(' + scale + ')')\n      }))\n      .on('dblclick.zoom', null)\n    },\n    disableZoom() {\n      const svg = d3.select('#div_graph').select(\"svg\") \n      svg.on('.zoom', null)\n    },\n    drawBarChart(div, data_){\n      // clean the data\n      let that = this\n      var data = []\n      const keys = Object.keys(data_);\n      \n      for(var i=0;i<keys.length;i++){\n        data.push({'key':keys[i],'value':data_[keys[i]]})\n        }\n\n      data.sort((a, b) => a.value - b.value);\n      data.reverse();\n\n      var margin = {top: 20, right: 30, bottom: 90, left: 70},\n      margin2 = { top: 230, right: 30, bottom: 10, left: 70 },\n      width = window.innerWidth*(7/12)*0.5 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom,\n      height2 = 300 - margin2.top - margin2.bottom;\n\n      var svg = d3.select(div).append(\"svg\")\n      // .append(\"rect\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n      var focus = svg.append(\"g\")\n      .attr(\"class\", \"focus\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      var context = svg.append(\"g\")\n      .attr(\"class\", \"context\")\n      .attr(\"transform\", \"translate(\" + margin2.left + \",\" + margin2.top + \")\");\n\n\n      // set the ranges\n      var x_domain = 0;\n      var temp_data = 0;\n      var x = d3.scaleBand().range([0, width]).padding(0.1);\n      var y = d3.scaleLinear().range([height, 0]);\n      // set brushable ranges\n      var x2 = d3.scaleBand().range([0, width]).padding(0.1);\n      var y2 = d3.scaleLinear().range([height2, 0]);\n\n      var xAxis = d3.axisBottom(x).tickSize(0),\n          xAxis2 = d3.axisBottom(x2).tickSize(0),\n          yAxis = d3.axisLeft(y);\n\n      var brush = d3.brushX()\n          .extent([[0, 0], [width, height2]])\n          .on(\"brush end\", brushed);\n\n      \n      var bars1;\n      var bars2;\n      // Scale the range of the data in the domains\n                      temp_data = data;\n                      x_domain = data.map(function(d) { return d.key; })\n                      // console.log(x_domain)\n                      x.domain(data.map(function(d) { return d.key; }));\n                      y.domain([0, d3.max(data, function(d) { return d.value; })]);\n                      x2.domain(x.domain());\n                      y2.domain(y.domain());\n                      \n                      var temp_rt =  drawBar1(focus, data)\n                      var bars1 = temp_rt[0]\n                      var bar1bars = temp_rt[1]\n                      var bar1x = temp_rt[2]\n                      var bar1y = temp_rt[3]\n      var bars2 = context.selectAll(\"rect\").data(data).enter().append(\"rect\");\n\n                      bars2.attr(\"class\", \"bar\").attr(\"x\", function(d) { return x2(d.key); })\n                          .attr(\"y\", function(d) { return y2(d.value); })\n                          .attr(\"width\", x2.bandwidth())\n                          .attr(\"height\", function(d){ return height2-y2(d.value); })\n                          .attr('fill','steelblue');\n\n                      focus.append(\"path\")\n                      .datum(data)\n                      .attr(\"class\", \"bar\")\n                      .attr(\"d\", bars1);\n\n                      context.append(\"path\")\n                          .datum(data)\n                          .attr(\"class\", \"bar\")\n                          .attr(\"d\", bars2);\n\n                      context.append(\"g\")\n                          .attr(\"class\", \"axis axis--x\")\n                          .attr(\"transform\", \"translate(0,\" + height2 + \")\");\n                          // .call(xAxis2);\n\n                      context.append(\"g\")\n                          .attr(\"class\", \"brush\")\n                          .call(brush)\n                          .call(brush.move, x.range());\n\n                      svg.append(\"rect\")\n                          .attr(\"width\", width)\n                          .attr(\"height\", height)\n                          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n                          .attr('fill','none')\n              function drawBar1(focus, data){\n\n                  bars1 = focus.selectAll(\"rect\").data(data).enter().append(\"rect\");\n\n                  bar1bars = bars1.attr(\"class\", \"bar\").attr(\"x\", function(d) { return x(d.key); })\n                  .attr(\"y\", function(d) { return y(d.value); })\n                  .attr(\"width\", x.bandwidth())\n                  .attr(\"height\", function(d){ return height-y(d.value); })\n                  .attr('fill','steelblue')\n\n                  bar1x = focus.append(\"g\")\n                      .attr(\"class\", \"axis axis--x\")\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\n                      .call(xAxis)\n                      .selectAll(\"text\")  // NAME \n                      .style(\"text-anchor\", \"start\")\n                      .attr(\"dx\", \"+.8em\")\n                      .attr(\"dy\", \"+.1em\")\n                      .attr(\"transform\", \"rotate(-90)\" );\n\n                  bar1y = focus.append(\"g\")\n                      .attr(\"class\", \"axis axis--y\")\n                      .call(yAxis);\n\n                  // Create the Focus Y Axis Text Label\n                  focus.append(\"text\")\n                  .style(\"font\", \"10px arial\")\n                  .attr(\"transform\", \"rotate(-90)\")\n                  .attr(\"y\", 0 - margin.left)\n                  .attr(\"x\",0 - (height / 2))\n                  .attr(\"dy\", \"2em\")\n                  .style(\"text-anchor\", \"middle\")\n                  .text(\"Frequency\"); \n\n                  return [bars1, bar1bars, bar1x, bar1y];\n                  \n                  }\n                  function brushed() {\n                    if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; // ignore brush-by-zoom\n\n                    bar1bars.remove()\n                    bar1x.remove()\n                    bar1y.remove()\n\n                    var s = d3.event.selection || x2.range();\n                    var temp_domain = x_domain.slice(Math.round(s[0]/x2.step()), Math.round(s[1]/x2.step()))\n                    x.domain(temp_domain);\n                    console.log(temp_domain)\n                    const container = d3.select(this).node().parentElement.parentElement.parentElement.id;\n                    if(container == \"div_node_overview\"){\n                      that.brushed['entity_type'] = temp_domain;\n                      that.brushed['relationship_type'] = [];\n                      that.toggleOverviewPanel(\"entity\")\n                    }else if (container == \"div_link_overview\"){\n                      that.brushed['relationship_type'] = temp_domain; \n                      that.brushed['entity_type'] = [];\n                      that.toggleOverviewPanel(\"relationship\")\n                    }else{\n                      alert(\"error finding container\")\n                    }\n                    var new_temp_data = temp_data.slice(Math.round(s[0]/x2.step()), Math.round(s[1]/x2.step()))\n\n                    var temp_rt =  drawBar1(focus, new_temp_data)\n                    bars1 = temp_rt[0]\n                    bar1bars = temp_rt[1]\n                    bar1x = temp_rt[2]\n                    bar1y = temp_rt[3]\n\n                    focus.select(\"bar\").attr(\"d\", bars1);\n                    focus.select(\"axis axis--x\").call(xAxis);\n                  \n                }\n                \n    },\n    toggleOverviewPanel(focus){\n      if (focus == \"entity\") {\n        const containerFocus = document.querySelector(\"#div_node_overview\")\n        const containerUnFocus = document.querySelector(\"#div_link_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      } else{\n        const containerFocus = document.querySelector(\"#div_link_overview\")\n        const containerUnFocus = document.querySelector(\"#div_node_overview\")\n        containerFocus.style.border = \"2px solid green\"\n        containerUnFocus.style.border = \"None\"\n      }\n    },\n    retrieve_types_nodes(){\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed)\n    }\n  },\n  watch: {\n    \n    graphOverview(){\n      console.log('tuymeieeeeee',this.graphOverview)\n      var node_overview_data = this.graphOverview['data']['entity']\n      var link_overview_data = this.graphOverview['data']['relationship']\n      console.log('fff', node_overview_data, link_overview_data)\n      this.drawBarChart('#div_link_overview', link_overview_data)\n      this.drawBarChart('#div_node_overview', node_overview_data)\n    },\n    graphData () {\n      console.log(this.graphData)\n      this.graphData['results'][0]['data'][0]['graph']['nodes'].forEach(function (d) {\n        d['status'] = 'unclicked'\n      })\n      console.log(\"check graph data\")\n      console.log(this.graphData)\n      KGutils.graphDataParsing(this.graphData, this.currentEntities, this.currentRelations)\n      this.drawNeo4jd3()\n      \n    }, \n    selectedEntities(val) {\n      if (val.length > 0) {\n        console.log(\"retrieving data now!!!\")\n        console.log(val.length)\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        console.log(\"****************\")\n        console.log(val)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n        this.$store.dispatch(\"retrieveNodeGeo\", {node: this.selectedEntities})\n      }\n    }, \n    selectedRelations(val){\n      if (val.length > 0) {\n        console.log(\"****************\")\n        console.log(val.length)\n        console.log(val) \n        console.log(\"retrieving data now!!!\")\n        console.log(this.selectedEntities)\n        console.log(this.selectedRelations)\n        this.$store.dispatch(\"retrieveSubTable\", {entities: this.selectedEntities, relations: this.selectedRelations})\n      }\n    }, \n    brushed:{\n      handler(val){\n          console.log(val);\n      },\n      deep:true \n    },\n    relationStatusReady(val){\n      console.log(\"relation status: \" + val) \n\n    },\n    relationTypeData(val) {\n      if(this.relationStatusReady) {\n        console.log(\"relation type data is ready\")\n\n      }else{\n        console.log(\"relation type data is not ready yet!\")\n      }\n    },\n    loading(val){\n      this.loading_value = val\n    },\n    \n  },\n  beforeMounted() {\n\n  }, \n  mounted () {\n\n  },\n  computed: {\n    ...mapState(['graphData', 'relationStatusReady', 'relationTypeData','loading', 'graphOverview']),\n    HEIGHT () {\n      return window.innerHeight*0.7 + 'px'\n    },\n    OVERVIEW_HEIGHT(){\n      return window.innerHeight*0.3 + 'px'\n    }\n  }\n}\n</script>\n<style>\n\n.lasso path {\n    stroke: rgb(80,80,80);\n    stroke-width:2px;\n}\n\n.lasso .drawn {\n    fill-opacity:.05 ;\n}\n\n.lasso .loop_close {\n    fill:none;\n    stroke-dasharray: 4,4;\n}\n\n.lasso .origin {\n    fill:#3399FF;\n    fill-opacity:.5;\n}\n\n.not_possible {\n    fill: rgb(200,200,200);\n}\n\n.possible {\n    fill: #EC888C;\n}\n\n.nodes .selected {\n    fill: green!important;\n    stroke-width: 3px!important;\n    stroke: black;\n}\n.relationships .selected {\n    stroke-width: 5px !important;\n    stroke: green!important;\n}\n.graph-btn-container{\n    position: relative; \n    top: 30px;\n}\n.kg-view-btn{\n  margin-right: 10px;\n}\n\n.circle-button:hover{\n  cursor: pointer;\n}\n\n.neo4jd3{\n  margin-top:60px;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}