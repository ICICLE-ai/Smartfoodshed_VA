{"ast":null,"code":"import _objectSpread from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\"; // import RightClickMenu from \"@/components/RightClickMenu\";\n// import InoutputBtns from \"@/components/InoutputBtns\";\n\nexport default {\n  data: function data() {\n    return {\n      initialX: undefined,\n      initialY: undefined,\n      dataStatus: false,\n      resizeX: undefined,\n      resizeY: undefined,\n      // draggable: true,\n      width: 500,\n      height: 600,\n      resizeWidth: 0,\n      //\n      resizeHeight: 0,\n      marginTop: 0,\n      marginLeft: 0,\n      topMargin: window.innerHeight / 2,\n      leftMargin: window.innerWidth / 2,\n      resizingStatus: false,\n      ff: false,\n      //   showRightClickMenu: false,\n      rightMenuX: 0,\n      rightMenuY: 0,\n      loadingStatus: undefined,\n      componentId: \"tabular-0\",\n      // for right click menu\n      items: [{\n        title: \"Remove node\"\n      }],\n      container: \".documents-components-list\",\n      selected: [],\n      sheets: [],\n      currentDataBase: [],\n      answerBasedRetrieval: {},\n      flag: false,\n      tableItemKey: \"\",\n      //-----\n      search: \"\",\n      calories: '',\n      desserts: [],\n      headers: [],\n      selected_rows: [],\n      singleSelect: false,\n      sheetNames: [],\n      tab: null,\n      sheetItemKey: null,\n      currentSheet: null,\n      currentData: null\n    };\n  },\n  methods: {\n    dragStart: function dragStart(e) {\n      var el = document.querySelector(\"#\".concat(e.target.id));\n      var initialLeft = parseInt(el.style.left.split(\"px\")[0]) - e.clientX;\n      var initialTop = parseInt(el.style.top.split(\"px\")[0]) - e.clientY;\n      e.dataTransfer.setData(\"item-id\", e.target.id);\n      e.dataTransfer.setData(\"initialLeft\", initialLeft);\n      e.dataTransfer.setData(\"initialTop\", initialTop);\n      this.$store.dispatch(\"changeCurrentDraggingVM\", this);\n    },\n    mouseDownHandler: function mouseDownHandler(e) {\n      // this.$store.dispatch('changeResizerStatus', true);\n      this.resizeX = e.clientX;\n      this.resizeY = e.clientY;\n      document.addEventListener(\"mousemove\", this.mouseMoveHandler);\n      document.addEventListener(\"mouseup\", this.mouseUpHandler);\n      this.resizingStatus = true;\n    },\n    mouseMoveHandler: function mouseMoveHandler(e) {\n      var dx = e.clientX - this.resizeX;\n      var dy = e.clientY - this.resizeY;\n      this.width = this.resizeWidth + dx;\n      this.height = this.resizeHeight + dy;\n    },\n    mouseUpHandler: function mouseUpHandler(e) {\n      this.resizeWidth = this.width;\n      this.resizeHeight = this.height;\n      document.removeEventListener(\"mousemove\", this.mouseMoveHandler);\n      document.removeEventListener(\"mouseup\", this.mouseUpHandler); // this.$store.dispatch('changeResizerStatus', false)\n\n      this.resizingStatus = false;\n    },\n    rightClickMenuShow: function rightClickMenuShow(e) {\n      e.preventDefault();\n      this.showRightClickMenu = true;\n      this.rightMenuX = e.clientX;\n      this.rightMenuY = e.clientY;\n    },\n    printCorpus: function printCorpus() {\n      console.log(this.itemProps);\n    },\n    toggleSheet: function toggleSheet(sheetName) {\n      if (this.currentSheet != sheetName) {\n        this.currentSheet = sheetName;\n        this.sheetDataUpdate(this.currentSheet);\n      }\n    },\n    sheetDataUpdate: function sheetDataUpdate(sheetName) {\n      var val = this.itemProps.inputData;\n      var tableValue = val[\"data\"][sheetName];\n      this.headers = [];\n\n      if (Object.keys(tableValue).length > 0) {\n        for (var _i = 0, _Object$keys = Object.keys(tableValue[0]); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          this.headers.push({\n            text: key.charAt(0).toUpperCase() + key.slice(1),\n            //\n            value: key\n          });\n        }\n\n        this.tableItemKey = this.headers[0][\"value\"];\n        this.currentDataBase = Object.values(tableValue);\n        this.desserts = Object.values(tableValue);\n      }\n    },\n    filterOnlyCapsText: function filterOnlyCapsText(value, search, item) {\n      console.log(value, search, item);\n      return value != null && search != null && typeof value === 'string' && value.toString().indexOf(search) !== -1;\n    },\n    convert: function convert(raw) {\n      // vuetify need the text + value, not label+value \n      var newOutput = [];\n      raw.forEach(function (d) {\n        var temp = {\n          text: d['label'],\n          value: d['value']\n        };\n        newOutput.push(temp);\n      });\n      return newOutput;\n    },\n    itemSelectedHandler: function itemSelectedHandler(_ref) {\n      var item = _ref.item,\n          value = _ref.value;\n\n      if (value) {\n        this.$store.dispatch('setTableSelected', {\n          action: 'add',\n          sheetName: this.currentSheet,\n          value: [item]\n        });\n      } else {\n        this.$store.dispatch('setTableSelected', {\n          action: 'remove',\n          sheetName: this.currentSheet,\n          value: [item]\n        });\n      }\n    },\n    retrieveGraphFromTableHandler: function retrieveGraphFromTableHandler() {\n      this.$store.dispatch(\"retrieveGraphFromTable\");\n    },\n    selectAllHandler: function selectAllHandler(_ref2) {\n      var items = _ref2.items,\n          value = _ref2.value;\n      console.log(items, value);\n\n      if (value) {\n        this.$store.dispatch('setTableSelected', {\n          action: 'add',\n          sheetName: this.currentSheet,\n          value: items\n        });\n      } else {\n        this.$store.dispatch('setTableSelected', {\n          action: 'remove',\n          sheetName: this.currentSheet,\n          value: items\n        });\n      }\n    },\n    updateItemKey: function updateItemKey() {\n      this.currentSheet = this.currentData['sheet'][this.tab];\n\n      if (this.currentSheet == null) {\n        return;\n      }\n\n      var sampleData = this.currentData['data'][this.currentSheet]['tableData'][0];\n\n      if (sampleData) {\n        var keys = Object.keys(sampleData);\n        console.log(\"check =================== here!!!\");\n        console.log(sampleData);\n        console.log(this.currentSheet);\n\n        if (keys.includes('relation_id')) {\n          this.sheetItemKey = 'relation_id';\n        } else if (keys.includes('id')) {\n          this.sheetItemKey = 'id';\n        }\n      }\n    }\n  },\n  created: function created() {\n    // Initialize initial position\n    this.$store.dispatch('getTableData');\n    this.marginTop = this.topMargin - this.height / 2;\n    this.marginLeft = this.leftMargin - this.width / 2;\n    this.resizeWidth = this.width;\n    this.resizeHeight = this.height;\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(['tableData', 'tableSelection', 'tableSelected', 'tableInteractiveMode', 'interactiveTableData'])), {}, {\n    // Determine Whether the component is draggable\n    // Not allowed when resizing and drawling link\n    draggable: function draggable() {\n      return !this.resizingStatus;\n    }\n  }),\n  components: {},\n  watch: {\n    tableData: function tableData() {\n      if (!this.tableInteractiveMode) {\n        this.dataStatus = true;\n        this.sheetNames = this.tableData['sheet'];\n        console.log(\"check here!!!\");\n        console.log(this.tableData);\n        this.currentData = this.tableData;\n\n        if (this.tab == null) {\n          this.tab = 0;\n        }\n\n        this.updateItemKey();\n      }\n    },\n    tableInteractiveMode: function tableInteractiveMode() {\n      if (!this.tableInteractiveMode) {\n        this.currentData = this.tableData;\n        this.sheetNames = this.currentData['sheet'];\n\n        if (this.tab == null) {\n          this.tab = 0;\n        }\n\n        this.updateItemKey();\n        this.selected_rows = [];\n      }\n    },\n    interactiveTableData: function interactiveTableData() {\n      console.log(this.interactiveTableData);\n\n      if (this.tableInteractiveMode) {\n        this.dataStatus = true;\n\n        if (this.interactiveTableData['sheet'].length > 0) {\n          this.currentData = this.interactiveTableData;\n          this.sheetNames = this.currentData['sheet']; // console.log(\"**********************\")\n          // console.log(this.interactiveTableData)\n\n          if (this.tab == null) {\n            this.tab = 0;\n          }\n\n          this.updateItemKey();\n          this.selected_rows = [];\n        } else {\n          alert(\"Nothing retrieved from table!\");\n          this.selected_rows = [];\n        }\n      }\n    },\n    tab: function tab() {\n      // tab id\n      // const tabId = this.tab\n      console.log(this.currentData);\n\n      if (this.currentData != null) {\n        this.updateItemKey();\n      }\n\n      console.log(this.sheetItemKey);\n    },\n    // \"itemProps.inputData\": function (val, oldVal) {\n    //   console.log(\"newVal, oldVal\");\n    //   if (val) {\n    //     this.loadingStatus = true;\n    //     this.dataStatus = val.tableNames;\n    //     this.headers = [];\n    //     const tableNames = val['tableNames']; \n    //     tableNames.forEach(tablename => {\n    //       this.sheets.push({\n    //         name: tablename,\n    //         active: true,\n    //       })\n    //     })\n    //     this.currentSheet = tableNames[0];\n    //     this.sheetDataUpdate(this.currentSheet);\n    //     this.loadingStatus = false;\n    //   } else {\n    //     this.loadingStatus = false;\n    //     this.dataStatus = undefined;\n    //     this.currentDataBase = undefined;\n    //     this.desserts = undefined;\n    //   }\n    // },\n    dataStatus: function dataStatus(val, oldVal) {\n      if (val) {\n        var resizerBElelemt = document.querySelector(\"#\" + this.componentId).querySelector(\".resizer-b\");\n        var heightOfSheet = 25;\n        resizerBElelemt.style.bottom = -heightOfSheet - 12 + \"px\";\n      }\n    },\n    marginTop: function marginTop(newVal) {\n      console.log(newVal);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA,gC,CACA;AACA;;AACA;AACAA,MADA,kBACA;AACA;AACAC,yBADA;AAEAC,yBAFA;AAGAC,uBAHA;AAIAC,wBAJA;AAKAC,wBALA;AAMA;AACAC,gBAPA;AAQAC,iBARA;AASAC,oBATA;AASA;AACAC,qBAVA;AAWAC,kBAXA;AAYAC,mBAZA;AAaAC,uCAbA;AAcAC,uCAdA;AAeAC,2BAfA;AAgBAC,eAhBA;AAkBA;AACAC,mBAnBA;AAoBAC,mBApBA;AAqBAC,8BArBA;AAsBAC,8BAtBA;AAuBA;AACAC;AAAAC;AAAA,QAxBA;AA0BAC,6CA1BA;AA4BAC,kBA5BA;AA8BAC,gBA9BA;AAgCAC,yBAhCA;AAiCAC,8BAjCA;AAkCAC,iBAlCA;AAmCAC,sBAnCA;AAoCA;AACAC,gBArCA;AAsCAC,kBAtCA;AAuCAC,kBAvCA;AAwCAC,iBAxCA;AA0CAC,uBA1CA;AA2CAC,yBA3CA;AA4CAC,oBA5CA;AA6CAC,eA7CA;AA8CAC,wBA9CA;AA+CAC,wBA/CA;AAgDAC;AAhDA;AAkDA,GApDA;AAqDAC;AACAC,aADA,qBACAC,CADA,EACA;AACA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACA,KATA;AAWAC,oBAXA,4BAWAD,CAXA,EAWA;AACA;AACA;AACA;AACAE;AACAA;AACA;AACA,KAlBA;AAoBAC,oBApBA,4BAoBAH,CApBA,EAoBA;AACA;AACA;AACA;AACA;AACA,KAzBA;AA2BAI,kBA3BA,0BA2BAJ,CA3BA,EA2BA;AACA;AACA;AACAE;AACAA,mEAJA,CAKA;;AACA;AACA,KAlCA;AAoCAG,sBApCA,8BAoCAL,CApCA,EAoCA;AACAA;AACA;AACA;AACA;AACA,KAzCA;AA2CAM,eA3CA,yBA2CA;AACAC;AACA,KA7CA;AA+CAC,eA/CA,uBA+CAC,SA/CA,EA+CA;AACA;AACA;AACA;AACA;AACA,KApDA;AAsDAC,mBAtDA,2BAsDAD,SAtDA,EAsDA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACAE,4DADA;AACA;AACAC;AAFA;AAIA;;AACA;AACA;AACA;AACA;AACA,KAtEA;AAuEAC,sBAvEA,8BAuEAD,KAvEA,EAuEAzB,MAvEA,EAuEA2B,IAvEA,EAuEA;AACAP;AACA,8BACApB,cADA,IAEA,yBAFA,IAGAyB,uCAHA;AAIA,KA7EA;AA8EAG,WA9EA,mBA8EAC,GA9EA,EA8EA;AACA;AACA;AACAA;AACA;AACAL,0BADA;AAEAC;AAFA;AAIAK;AACA,OANA;AAOA;AACA,KAzFA;AA0FAC,uBA1FA,qCA0FA;AAAA;AAAA;;AAEA;AACA;AAAAC;AAAAV;AAAAG;AAAA;AACA,OAFA,MAEA;AACA;AAAAO;AAAAV;AAAAG;AAAA;AACA;AACA,KAjGA;AAkGAQ,iCAlGA,2CAkGA;AACA;AACA,KApGA;AAqGAC,oBArGA,mCAqGA;AAAA;AAAA;AACAd;;AACA;AACA;AAAAY;AAAAV;AAAAG;AAAA;AACA,OAFA,MAEA;AACA;AAAAO;AAAAV;AAAAG;AAAA;AACA;AACA,KA5GA;AA6GAU,iBA7GA,2BA6GA;AACA;;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACAf;AACAA;AACAA;;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA;AACA;AA/HA,GArDA;AAuLAgB,SAvLA,qBAuLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA9LA;AAgMAC,4CACAC,0GADA;AAGA;AACA;AACAC,aALA,uBAKA;AACA;AACA;AAPA,IAhMA;AA0MAC,gBA1MA;AA6MAC;AAEAC,aAFA,uBAEA;AACA;AACA;AACA;AACAtB;AACAA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,KAdA;AAeAuB,wBAfA,kCAeA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,KAzBA;AA0BAC,wBA1BA,kCA0BA;AACAxB;;AACA;AACA;;AACA;AACA;AACA,sDAFA,CAGA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,SAVA,MAUA;AACAyB;AACA;AACA;AACA;AACA,KA7CA;AA8CAtC,OA9CA,iBA8CA;AACA;AACA;AACAa;;AACA;AACA;AACA;;AACAA;AACA,KAtDA;AAuDA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA9C;AACA;AACA;AACA;AACAwE;AACA;AACA,KA1FA;AA2FAjE,aA3FA,qBA2FAkE,MA3FA,EA2FA;AACA3B;AACA;AA7FA;AA7MA","names":["data","initialX","initialY","dataStatus","resizeX","resizeY","width","height","resizeWidth","resizeHeight","marginTop","marginLeft","topMargin","leftMargin","resizingStatus","ff","rightMenuX","rightMenuY","loadingStatus","componentId","items","title","container","selected","sheets","currentDataBase","answerBasedRetrieval","flag","tableItemKey","search","calories","desserts","headers","selected_rows","singleSelect","sheetNames","tab","sheetItemKey","currentSheet","currentData","methods","dragStart","e","mouseDownHandler","document","mouseMoveHandler","mouseUpHandler","rightClickMenuShow","printCorpus","console","toggleSheet","sheetName","sheetDataUpdate","text","value","filterOnlyCapsText","item","convert","raw","newOutput","itemSelectedHandler","action","retrieveGraphFromTableHandler","selectAllHandler","updateItemKey","created","computed","mapState","draggable","components","watch","tableData","tableInteractiveMode","interactiveTableData","alert","resizerBElelemt","newVal"],"sourceRoot":"src/components","sources":["CTableViewer.vue"],"sourcesContent":["<template>\n  <div>\n    <v-hover v-slot=\"{ hover }\">\n      <v-card\n        :elevation=\"hover ? 12 : 5\"\n        class=\"card-tabular\"\n        :draggable=\"draggable\"\n        @dragstart=\"dragStart\"\n        outlined\n        :id=\"componentId\"\n        ref=\"cardComp\"\n        @contextmenu=\"rightClickMenuShow\"\n        @dblclick=\"printCorpus\"\n        :style=\"{\n          top: marginTop + 'px',\n          left: marginLeft + 'px',\n          width: `${width}px`,\n          height: `${height}px`,\n          position: 'absolute',\n        }\"\n      > \n         \n        <template>\n            <v-card-text v-if=\"!dataStatus\" class=\"card-name\">\n                No Table Data\n            </v-card-text>\n            <div v-if=\"dataStatus\">\n            <v-tabs v-model=\"tab\">\n                <v-tab\n                  v-for=\"sheetname in sheetNames\"\n                  :key=\"sheetname\"\n                >\n                  {{ sheetname }}\n                </v-tab>\n            </v-tabs>  \n            <v-tabs-items v-model=\"tab\" ref=\"tabletabs\">\n                <v-tab-item\n                  v-for=\"sheetname in sheetNames\"\n                  :key=\"sheetname\"\n                >\n                   <v-data-table\n                        :height=\"`${height - 50 - 70 - 150}px`\"\n                        v-model=\"selected_rows\"\n                        :loading=\"loadingStatus\"\n                        show-select\n                        :headers=\"convert(currentData['data'][sheetname]['tableInfo'])\"\n                        :items=\"currentData['data'][sheetname]['tableData']\"\n                        :item-key=\"sheetItemKey\"\n                        :single-select=\"singleSelect\"\n                        class=\"elevation-1\"\n                        :search=\"search\"\n                        :custom-filter=\"filterOnlyCapsText\"\n                        @item-selected=\"itemSelectedHandler\"\n                        @toggle-select-all=\"selectAllHandler\"\n                    >\n                        <template v-slot:top>\n                          <v-text-field\n                              v-model=\"search\"\n                              label=\"Search (UPPER CASE ONLY)\"\n                              class=\"mx-4\"\n                              style=\"margin-top: 3px\"\n                          ></v-text-field>\n                        </template>\n                        <template v-slot:footer>\n                          <v-container>\n                            <v-row\n                              justify=\"space-between\"\n                            >\n                              <v-col cols=\"3\">\n                                <v-text-field\n                                  v-model=\"calories\"\n                                  type=\"number\"\n                                  label=\"Less than\"  \n                                  style=\"width: 80px\"\n\n                              ></v-text-field>\n                              </v-col>\n                              <v-col cols=\"3\" style=\"margin-top:20px\">\n                                 <v-btn @click=\"retrieveGraphFromTableHandler\">\n                                  Retrieve\n                                </v-btn>\n                              </v-col>\n                            </v-row>\n                          </v-container>\n                        </template>\n                    </v-data-table>\n                </v-tab-item>\n            </v-tabs-items>            \n          </div>\n        </template>\n\n        <div class=\"resizer resizer-r\" @mousedown=\"mouseDownHandler\"></div>\n        <div class=\"resizer resizer-b\" @mousedown=\"mouseDownHandler\"></div>\n      </v-card>\n    </v-hover>\n    <!-- <v-menu\n      v-model=\"showRightClickMenu\"\n      :position-x=\"rightMenuX\"\n      :position-y=\"rightMenuY\"\n      absolute\n      offset-y\n    >\n      <RightClickMenu\n        :vue=\"this\"\n        :container=\"container\"\n        :itemProps=\"itemProps\"\n        store=\"documents\"\n      />\n    </v-menu> -->\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n// import RightClickMenu from \"@/components/RightClickMenu\";\n// import InoutputBtns from \"@/components/InoutputBtns\";\nexport default {\n  data() {\n    return {\n      initialX: undefined,\n      initialY: undefined,\n      dataStatus: false,\n      resizeX: undefined,\n      resizeY: undefined,\n      // draggable: true,\n      width: 500,\n      height: 600,\n      resizeWidth: 0, //\n      resizeHeight: 0,\n      marginTop: 0,\n      marginLeft: 0,\n      topMargin: window.innerHeight / 2,\n      leftMargin: window.innerWidth / 2,\n      resizingStatus: false,\n      ff:false, \n\n    //   showRightClickMenu: false,\n      rightMenuX: 0,\n      rightMenuY: 0,\n      loadingStatus: undefined,\n      componentId: \"tabular-0\",\n      // for right click menu\n      items: [{ title: \"Remove node\" }],\n\n      container: \".documents-components-list\",\n\n      selected: [],\n     \n      sheets: [], \n      \n      currentDataBase: [],\n      answerBasedRetrieval: {},\n      flag: false,\n      tableItemKey: \"\",\n      //-----\n      search: \"\",\n      calories: '', \n      desserts: [],\n      headers: [],\n      \n      selected_rows:[],\n      singleSelect: false,\n      sheetNames: [],\n      tab: null,\n      sheetItemKey: null, \n      currentSheet: null, \n      currentData: null,\n    };\n  },\n  methods: {\n    dragStart(e) {\n      const el = document.querySelector(`#${e.target.id}`);\n      const initialLeft = parseInt(el.style.left.split(\"px\")[0]) - e.clientX;\n      const initialTop = parseInt(el.style.top.split(\"px\")[0]) - e.clientY;\n      e.dataTransfer.setData(\"item-id\", e.target.id);\n      e.dataTransfer.setData(\"initialLeft\", initialLeft);\n      e.dataTransfer.setData(\"initialTop\", initialTop);\n      this.$store.dispatch(\"changeCurrentDraggingVM\", this);\n    },\n\n    mouseDownHandler(e) {\n      // this.$store.dispatch('changeResizerStatus', true);\n      this.resizeX = e.clientX;\n      this.resizeY = e.clientY;\n      document.addEventListener(\"mousemove\", this.mouseMoveHandler);\n      document.addEventListener(\"mouseup\", this.mouseUpHandler);\n      this.resizingStatus = true;\n    },\n\n    mouseMoveHandler(e) {\n      const dx = e.clientX - this.resizeX;\n      const dy = e.clientY - this.resizeY;\n      this.width = this.resizeWidth + dx;\n      this.height = this.resizeHeight + dy;\n    },\n\n    mouseUpHandler(e) {\n      this.resizeWidth = this.width;\n      this.resizeHeight = this.height;\n      document.removeEventListener(\"mousemove\", this.mouseMoveHandler);\n      document.removeEventListener(\"mouseup\", this.mouseUpHandler);\n      // this.$store.dispatch('changeResizerStatus', false)\n      this.resizingStatus = false;\n    },\n\n    rightClickMenuShow(e) {\n      e.preventDefault();\n      this.showRightClickMenu = true;\n      this.rightMenuX = e.clientX;\n      this.rightMenuY = e.clientY;\n    },\n\n    printCorpus() {\n      console.log(this.itemProps);\n    },\n\n    toggleSheet(sheetName){\n      if (this.currentSheet != sheetName) {\n        this.currentSheet = sheetName;\n        this.sheetDataUpdate(this.currentSheet);\n      }\n    },\n\n    sheetDataUpdate(sheetName){\n      const val = this.itemProps.inputData; \n      const tableValue = val[\"data\"][sheetName];\n      this.headers = []\n     \n      if(Object.keys(tableValue).length > 0){\n        for (let key of Object.keys(tableValue[0])) {\n          this.headers.push({\n            text: key.charAt(0).toUpperCase() + key.slice(1), //\n            value: key,\n          }); \n        }\n        this.tableItemKey = this.headers[0][\"value\"];\n        this.currentDataBase = Object.values(tableValue);\n        this.desserts = Object.values(tableValue);\n      }\n    }, \n    filterOnlyCapsText (value, search, item) {\n      console.log(value, search, item)\n      return value != null &&\n        search != null &&\n        typeof value === 'string' &&\n        value.toString().indexOf(search) !== -1\n    },\n    convert(raw){\n      // vuetify need the text + value, not label+value \n      let newOutput = []\n      raw.forEach(d=>{\n        let temp = {\n          text: d['label'],\n          value: d['value'],\n        }\n        newOutput.push(temp)\n      })\n      return newOutput\n    }, \n    itemSelectedHandler({item, value}){\n      \n      if (value) {\n        this.$store.dispatch('setTableSelected', {action: 'add', sheetName: this.currentSheet, value: [item]})\n      } else {\n        this.$store.dispatch('setTableSelected', {action: 'remove', sheetName: this.currentSheet, value: [item]})\n      }\n    }, \n    retrieveGraphFromTableHandler(){ \n      this.$store.dispatch(\"retrieveGraphFromTable\")\n    }, \n    selectAllHandler({items, value}){\n      console.log(items, value)\n      if (value) {\n        this.$store.dispatch('setTableSelected', {action: 'add', sheetName: this.currentSheet, value: items})\n      } else {\n        this.$store.dispatch('setTableSelected', {action: 'remove', sheetName: this.currentSheet, value: items})\n      }\n    },\n    updateItemKey(){\n      this.currentSheet = this.currentData['sheet'][this.tab]\n      if (this.currentSheet == null){\n        return \n      }\n      const sampleData = this.currentData['data'][this.currentSheet]['tableData'][0]; \n\n      if(sampleData){\n        const keys = Object.keys(sampleData)\n        console.log(\"check =================== here!!!\")\n        console.log(sampleData)\n        console.log(this.currentSheet)\n        if(keys.includes('relation_id')){\n          this.sheetItemKey = 'relation_id'\n        }else if(keys.includes('id')){\n          this.sheetItemKey = 'id'\n        }\n      }\n    }\n  },\n  \n  created() {\n    // Initialize initial position\n    this.$store.dispatch('getTableData')\n    this.marginTop = this.topMargin - this.height / 2;\n    this.marginLeft = this.leftMargin - this.width / 2;\n    this.resizeWidth = this.width;\n    this.resizeHeight = this.height;\n  },\n\n  computed: {\n    ...mapState(['tableData', 'tableSelection', 'tableSelected', 'tableInteractiveMode', 'interactiveTableData']),\n\n    // Determine Whether the component is draggable\n    // Not allowed when resizing and drawling link\n    draggable() {\n      return !(this.resizingStatus);\n    },\n  },\n\n  components: {\n  },\n\n  watch: {\n\n    tableData () {\n      if (!this.tableInteractiveMode) {\n        this.dataStatus = true\n        this.sheetNames = this.tableData['sheet']\n        console.log(\"check here!!!\")\n        console.log(this.tableData)\n        this.currentData = this.tableData\n        if(this.tab==null){\n          this.tab = 0\n        } \n        this.updateItemKey()\n      }\n    },\n    tableInteractiveMode(){\n      if(!this.tableInteractiveMode){\n        this.currentData = this.tableData\n        this.sheetNames = this.currentData['sheet'] \n        if(this.tab==null){\n              this.tab = 0\n        } \n        this.updateItemKey()\n        this.selected_rows = []\n      }   \n    },\n    interactiveTableData(){\n      console.log(this.interactiveTableData)\n      if(this.tableInteractiveMode){\n        this.dataStatus = true\n        if(this.interactiveTableData['sheet'].length > 0){\n          this.currentData = this.interactiveTableData\n          this.sheetNames = this.currentData['sheet']\n          // console.log(\"**********************\")\n          // console.log(this.interactiveTableData)\n          if(this.tab==null){\n              this.tab = 0\n            } \n          this.updateItemKey()\n          this.selected_rows = []\n        }else{\n          alert(\"Nothing retrieved from table!\")\n          this.selected_rows = []\n        }\n      }\n    },\n    tab() {\n      // tab id\n      // const tabId = this.tab\n      console.log(this.currentData)\n      if (this.currentData != null) {\n        this.updateItemKey()\n      }\n      console.log(this.sheetItemKey)\n    },\n    // \"itemProps.inputData\": function (val, oldVal) {\n    \n    //   console.log(\"newVal, oldVal\");\n    //   if (val) {\n    //     this.loadingStatus = true;\n    //     this.dataStatus = val.tableNames;\n    //     this.headers = [];\n\n    //     const tableNames = val['tableNames']; \n    //     tableNames.forEach(tablename => {\n    //       this.sheets.push({\n    //         name: tablename,\n    //         active: true,\n    //       })\n    //     })\n        \n    //     this.currentSheet = tableNames[0];\n\n    //     this.sheetDataUpdate(this.currentSheet);\n\n    //     this.loadingStatus = false;\n    //   } else {\n    //     this.loadingStatus = false;\n    //     this.dataStatus = undefined;\n    //     this.currentDataBase = undefined;\n    //     this.desserts = undefined;\n    //   }\n    // },\n\n    dataStatus: function(val, oldVal) {\n        if (val) {\n        const resizerBElelemt = document.querySelector(\"#\" + this.componentId).querySelector(\".resizer-b\"); \n        const heightOfSheet = 25;\n        resizerBElelemt.style.bottom = (-heightOfSheet - 12) + \"px\"; \n        }\n    }, \n    marginTop(newVal) {\n       console.log(newVal);\n    }\n   \n  },\n};\n</script>\n\n<style scoped>\n.card-name {\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  height: 100%;\n}\n\n/* .card-actions{\n    position: absolute;\n    transform: translate(300px, -150px);\n    padding: 0;\n  } */\n\n.resizer {\n  position: absolute;\n}\n\n.resizer-r {\n  cursor: col-resize;\n  height: 100%;\n  right: -1%;\n  top: 0;\n  width: 5px;\n}\n\n/* Placed at the bottom side */\n.resizer-b {\n  bottom: 0;\n  cursor: row-resize;\n  height: 5px;\n  left: 0;\n  width: 100%;\n}\n\n.v-data-footer {\n  height: 50px !important;\n}\n\n.sheetname{\n  margin-top: 10px;\n  height: 20px;\n}\n</style>                                                                   "]},"metadata":{},"sourceType":"module"}