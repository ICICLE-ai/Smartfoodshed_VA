{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { active } from \"d3\";\n\nfunction getItemIndex(container, item) {\n  if (!container || container.length == 0) {\n    return -1;\n  }\n\n  var indexingTerm = item.relation_id ? 'relation_id' : item.id ? 'id' : null;\n\n  if (indexingTerm == null) {\n    console.log(\"Error: item doesn't contain id or relation_id attribute\");\n    return -1;\n  }\n\n  var numOfItems = container.length;\n\n  if (numOfItems > 0) {\n    for (var i = 0; i < numOfItems; i++) {\n      if (container[i][indexingTerm] && item[indexingTerm]) {\n        if (container[i][indexingTerm] == item[indexingTerm]) {\n          return i;\n        }\n      }\n    }\n  } else {\n    return -1;\n  }\n\n  return -1;\n}\n\nfunction generationEntityRelations(container) {\n  var sheets = Object.keys(container);\n  var nodes = [];\n  var relations = [];\n  sheets.forEach(function (sheet) {\n    var data = container[sheet];\n    var items = Object.values(data);\n    items.forEach(function (item) {\n      if (item.relation_id != null) {\n        relations.push(item.relation_id);\n      } else if (item.id != null) {\n        nodes.push(item.id);\n      } else {\n        console.log(\"Error, item doesn't have id or relation_id\");\n      }\n    });\n  });\n  return {\n    nodes: nodes,\n    relations: relations\n  };\n}\n\nfunction addItemsToSelection(container, items) {\n  if (items.length <= 0) {\n    return -1;\n  } else {\n    var sample = items[0];\n    var indexingTerm = sample.relation_id != null ? 'relation_id' : sample.id != null ? 'id' : null;\n    items.forEach(function (item) {\n      var id = item[indexingTerm];\n\n      if (id != null) {\n        if (container[id] == null) {\n          container[id] = item;\n        }\n      } else {\n        console.log(item);\n        console.log(id);\n        console.log(id != null);\n        console.log(indexingTerm);\n        console.log(\"Error: item doesn't have either id or relation_id\");\n      }\n    });\n    return 1;\n  }\n}\n\nfunction removeItemsToSelection(container, items) {\n  if (items.length <= 0) {\n    return -1;\n  } else {\n    var sample = items[0];\n    var indexingTerm = sample.relation_id != null ? 'relation_id' : sample.id != null ? 'id' : null;\n    items.forEach(function (item) {\n      var id = item[indexingTerm];\n\n      if (id != null) {\n        if (container[id] != null) {\n          delete container[id];\n        }\n      } else {\n        console.log(\"Error: Item id: \" + id + \" is not in container\");\n      }\n    });\n    return 1;\n  }\n}\n\nfunction idParsingToDict(container, _ref) {\n  var sheets = _ref.sheets,\n      data = _ref.data;\n\n  if (container == null) {\n    alert(\"container for id parsing is Null\");\n  } else {\n    container['relations'] = {};\n    container['entities'] = {};\n    sheets.forEach(function (sheet) {\n      var sheetData = data[sheet]['tableData'];\n      sheetData.forEach(function (item) {\n        if (item.relation_id != null) {\n          container['relations'][item.relation_id] = {\n            fromSheet: sheet,\n            type: 'relationship',\n            data: item\n          };\n        } else if (item.id != null) {\n          container['entities'][item.id] = {\n            fromSheet: sheet,\n            type: 'entity',\n            data: item\n          };\n        } else {\n          console.log('Item no id or relation id');\n        }\n      });\n    });\n  }\n}\n\nfunction retrieveInteractiveTable(tableData, dictionary, _ref2) {\n  var entities = _ref2.entities,\n      relations = _ref2.relations;\n  var sheets = tableData['sheet'];\n  var filtered_data = {};\n  var activeSheets = [];\n\n  if (entities == null && relations == null) {\n    return null;\n  }\n\n  console.log(\"---===---===---===---===\");\n  console.log(entities);\n  console.log(relations); // entity handler\n\n  if (entities != null && Object.keys(dictionary['entities']).length > 0) {\n    entities.forEach(function (eId) {\n      var info = dictionary['entities'][eId];\n\n      if (info != null) {\n        var originalSheet = info['fromSheet'];\n\n        if (!activeSheets.includes(originalSheet)) {\n          activeSheets.push(originalSheet);\n        }\n\n        if (filtered_data[originalSheet] != null) {\n          filtered_data[originalSheet]['tableData'].push(info['data']);\n        } else {\n          filtered_data[originalSheet] = {\n            'tableData': [info['data']],\n            'tableInfo': tableData['data'][originalSheet]['tableInfo']\n          };\n        }\n      } else {\n        console.log(dictionary['entities']);\n        console.log(dictionary['entities'][eId]);\n        console.log(\"missing info from dictionary\");\n      }\n    });\n  } // relation handler\n\n\n  if (relations != null && Object.keys(dictionary['relations']).length > 0) {\n    relations.forEach(function (rId) {\n      var info = dictionary['relations'][rId];\n\n      if (info != null) {\n        var originalSheet = info['fromSheet'];\n\n        if (!activeSheets.includes(originalSheet)) {\n          activeSheets.push(originalSheet);\n        }\n\n        if (filtered_data[originalSheet] != null) {\n          filtered_data[originalSheet]['tableData'].push(info['data']);\n        } else {\n          filtered_data[originalSheet] = {\n            'tableData': [info['data']],\n            'tableInfo': tableData['data'][originalSheet]['tableInfo']\n          };\n        }\n      } else {\n        console.log(\"missing info from dictionary\");\n      }\n    });\n  }\n\n  return {\n    data: filtered_data,\n    sheet: activeSheets\n  };\n}\n\nexport { getItemIndex, generationEntityRelations, addItemsToSelection, removeItemsToSelection, idParsingToDict, retrieveInteractiveTable };","map":{"version":3,"sources":["/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/src/utils/storehelp.js"],"names":["active","getItemIndex","container","item","length","indexingTerm","relation_id","id","console","log","numOfItems","i","generationEntityRelations","sheets","Object","keys","nodes","relations","forEach","sheet","data","items","values","push","addItemsToSelection","sample","removeItemsToSelection","idParsingToDict","alert","sheetData","fromSheet","type","retrieveInteractiveTable","tableData","dictionary","entities","filtered_data","activeSheets","eId","info","originalSheet","includes","rId"],"mappings":"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","sourcesContent":["import { active } from \"d3\"\n\nfunction getItemIndex(container, item){\n    if (!container || container.length == 0){\n        return -1\n    }\n    const indexingTerm = item.relation_id? 'relation_id': item.id? 'id': null\n    if (indexingTerm == null){\n        console.log(\"Error: item doesn't contain id or relation_id attribute\")\n        return -1\n    }\n    const numOfItems = container.length\n    if (numOfItems > 0){\n        for (let i = 0; i < numOfItems; i++) {\n            if(container[i][indexingTerm] && item[indexingTerm]){\n                if (container[i][indexingTerm] == item[indexingTerm]) {\n                    return i\n                }\n            }\n        }\n    }else{\n        return -1\n    }\n    return -1\n}\n\nfunction generationEntityRelations(container){\n    const sheets = Object.keys(container)\n    let nodes = []\n    let relations = [] \n    sheets.forEach(sheet => {\n        const data = container[sheet]\n        const items = Object.values(data)\n        items.forEach(item => {\n            if(item.relation_id != null){\n                relations.push(item.relation_id)\n            }else if(item.id != null) {\n                nodes.push(item.id)\n            }else{\n                console.log(\"Error, item doesn't have id or relation_id\")\n            }\n        })\n    })\n    return {nodes, relations}\n}\n\nfunction addItemsToSelection(container, items){\n    if (items.length <= 0) {\n        return -1\n    } else {\n        const sample = items[0] \n        const indexingTerm = sample.relation_id!=null? 'relation_id': sample.id!=null? 'id': null\n        items.forEach(item => {\n            const id = item[indexingTerm]\n            if(id != null) {\n                if(container[id] == null){\n                    container[id] = item\n                }\n            } else {\n                console.log(item)\n                console.log(id)\n                console.log(id != null)\n                console.log(indexingTerm)\n                console.log(\"Error: item doesn't have either id or relation_id\")\n            }\n        })\n        return 1\n    }\n}\n\nfunction removeItemsToSelection(container, items){\n    if (items.length <= 0) {\n        return -1\n    } else {\n        const sample = items[0] \n        const indexingTerm = sample.relation_id!=null? 'relation_id': sample.id!=null? 'id': null\n        items.forEach(item => {\n            const id = item[indexingTerm]\n            if(id != null) {\n                if(container[id] != null){\n                    delete container[id]\n                }\n            } else {\n                console.log(\"Error: Item id: \" + id + \" is not in container\")\n            }\n        })\n        return 1\n    }\n}\n\nfunction idParsingToDict(container, {sheets, data}){\n    if (container == null) {\n        alert(\"container for id parsing is Null\")\n    }else {\n        container['relations'] = {}\n        container['entities'] = {} \n        sheets.forEach(sheet => {\n            const sheetData = data[sheet]['tableData']\n            sheetData.forEach(item=>{\n                if(item.relation_id != null){\n                    container['relations'][item.relation_id]={\n                        fromSheet: sheet,\n                        type: 'relationship',\n                        data: item\n                    }\n                }else if(item.id != null){\n                    container['entities'][item.id]={\n                        fromSheet: sheet,\n                        type: 'entity',\n                        data: item\n                    } \n                }else{\n                    console.log('Item no id or relation id')\n                }\n            })\n        })\n    }\n}\n\nfunction retrieveInteractiveTable(tableData, dictionary, {entities, relations}){ \n    const sheets = tableData['sheet']\n    let filtered_data = {}\n    let activeSheets = []\n    if (entities == null && relations == null){\n        return null\n    }\n    console.log(\"---===---===---===---===\")\n    console.log(entities)\n    console.log(relations)\n    // entity handler\n    if (entities != null && Object.keys(dictionary['entities']).length > 0) {\n        entities.forEach(eId => {\n            const info = dictionary['entities'][eId]\n            if(info!=null){\n                const originalSheet = info['fromSheet']\n                if(!activeSheets.includes(originalSheet)){\n                    activeSheets.push(originalSheet)\n                }\n                if(filtered_data[originalSheet]!=null){\n                    filtered_data[originalSheet]['tableData'].push(info['data'])\n                }else{\n                    filtered_data[originalSheet] = {\n                        'tableData': [info['data']], \n                        'tableInfo': tableData['data'][originalSheet]['tableInfo']\n                    } \n                }\n            }else {\n                console.log(dictionary['entities'])\n                console.log(dictionary['entities'][eId])\n                console.log(\"missing info from dictionary\")\n            }\n        })\n    }\n    // relation handler\n    if (relations != null && Object.keys(dictionary['relations']).length > 0) {\n        relations.forEach(rId => { \n            const info = dictionary['relations'][rId]\n            if(info!=null){\n                const originalSheet = info['fromSheet']\n                if(!activeSheets.includes(originalSheet)){\n                    activeSheets.push(originalSheet)\n                }\n                if(filtered_data[originalSheet]!=null){\n                    filtered_data[originalSheet]['tableData'].push(info['data'])\n                }else{\n                    filtered_data[originalSheet] = {\n                        'tableData': [info['data']], \n                        'tableInfo': tableData['data'][originalSheet]['tableInfo']\n                    } \n                }\n            }else {\n                console.log(\"missing info from dictionary\")\n            }\n        })\n    }\n    return {data:filtered_data, sheet: activeSheets}\n}\n\nexport {getItemIndex, generationEntityRelations, addItemsToSelection, removeItemsToSelection, idParsingToDict, retrieveInteractiveTable}"]},"metadata":{},"sourceType":"module"}