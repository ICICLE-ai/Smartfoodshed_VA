{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as d3 from 'd3';\nimport * as d3tip from '@/utils/d3-tip';\nexport default {\n  props: ['graphOverview'],\n  data: function data() {\n    return {\n      brushed: {\n        \"entity_type\": [],\n        \"relationship_type\": []\n      },\n      showColorPickerMenu: false,\n      arr: [1, 2, 3],\n      pickerX: 0,\n      pickerY: 0,\n      selectedColor: '#80cbc4'\n    };\n  },\n  computed: {\n    OVERVIEW_HEIGHT: function OVERVIEW_HEIGHT() {\n      return window.innerHeight * 0.3 + 'px';\n    }\n  },\n  methods: {\n    getContainerX: function getContainerX(title) {\n      var container = document.querySelector(\".container_\".concat(title.split(' ').join('_')));\n\n      if (container != null) {\n        return container.getBoundingClientRect().x;\n      } else {\n        return 0;\n      }\n    },\n    getContainerY: function getContainerY(title) {\n      var container = document.querySelector(\".container_\".concat(title.split(' ').join('_')));\n\n      if (container != null) {\n        return container.getBoundingClientRect().y;\n      } else {\n        return 0;\n      }\n    },\n    drawBarChart: function drawBarChart(div, data_, title) {\n      // clean the data\n      var that = this;\n      var data = [];\n      var keys = Object.keys(data_);\n\n      for (var i = 0; i < keys.length; i++) {\n        data.push({\n          'key': keys[i],\n          'value': data_[keys[i]]\n        });\n      }\n\n      data.sort(function (a, b) {\n        return a.value - b.value;\n      });\n      data.reverse();\n      console.log(\"data\", data);\n      var svg = d3.select(div).append(\"svg\").attr('class', \"container_\".concat(title.split(' ').join('_')));\n      var margin = 80;\n      var width = 500 - 2 * margin;\n      var height = 400 - 2 * margin;\n      var selected_bar = [];\n      var chart = svg.append('g').attr('transform', \"translate(\".concat(margin, \", \").concat(margin, \")\"));\n      var xScale = d3.scaleBand().range([0, width]).domain(data.map(function (s) {\n        return s.key;\n      })).padding(0.1);\n      var yScale = d3.scaleLinear().range([height, 0]).domain([0, d3.max(data, function (d) {\n        return d.value;\n      })]);\n\n      var makeYLines = function makeYLines() {\n        return d3.axisLeft().scale(yScale);\n      };\n\n      var xAxis = d3.axisBottom(xScale).tickSize(0);\n      chart.append('g').attr(\"class\", \"axis axis--x\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis).selectAll(\"text\").style(\"text-anchor\", \"start\").attr(\"dx\", \"-7em\").attr(\"dy\", \"+.1em\").attr(\"transform\", \"rotate(-80)\").style(\"font-size\", \"10px\");\n      chart.append('g').call(d3.axisLeft(yScale));\n      chart.append('g').attr('class', 'grid').call(makeYLines().tickSize(-width, 0, 0).tickFormat(''));\n      var barGroups = chart.selectAll().data(data).enter().append('g');\n      barGroups.append('rect').attr('class', function (d) {\n        return \"bar nodetype_\".concat(d.key ? d.key : 'undefined');\n      }).attr('x', function (g) {\n        return xScale(g.key);\n      }).attr('y', function (g) {\n        return yScale(g.value);\n      }).attr('height', function (g) {\n        return height - yScale(g.value);\n      }).attr('width', xScale.bandwidth()).on('contextmenu', function (d, i) {\n        var coordinates = d3.mouse(this);\n        that.pickerX = that.getContainerX(title) + coordinates[0];\n        that.pickerY = that.getContainerY(title) + coordinates[1];\n        d3.event.preventDefault();\n        that.currentNodeForColorPicker = \"nodetype_\".concat(d.key ? d.key : 'undefined');\n\n        if (d.selectedColor == null) {\n          that.selectedColor = '#80cbc4';\n        } else {\n          that.selectedColor = d.selectedColor;\n        }\n\n        that.showColorPickerMenu = true;\n      }).on('click', function (actual, i) {\n        if (selected_bar.includes(actual.key)) {\n          selected_bar = selected_bar.filter(function (item) {\n            return item !== actual.key;\n          });\n          d3.select(this).attr(\"stroke\", 'none');\n        } else {\n          selected_bar.push(actual.key);\n          d3.select(this).attr(\"stroke\", 'grey');\n          d3.select(this).attr(\"stroke-width\", '2px');\n        }\n\n        if (title == \"Link Overview\") {\n          that.brushed.relationship_type = selected_bar;\n        } else {\n          that.brushed.entity_type = selected_bar;\n        }\n      }).on('mouseenter', function (actual, i) {\n        d3.selectAll('.value').attr('opacity', 0);\n        d3.select(this).transition().duration(300).attr('opacity', 0.6).attr('x', function (a) {\n          return xScale(a.key) - 5;\n        }).attr('width', xScale.bandwidth() + 10);\n        var y = yScale(actual.value);\n        var line = chart.append('line').attr('id', 'limit').attr('x1', 0).attr('y1', y).attr('x2', width).attr('y2', y);\n      }).on('mouseleave', function () {\n        d3.selectAll('.value').attr('opacity', 1);\n        d3.select(this).transition().duration(300).attr('opacity', 1).attr('x', function (a) {\n          return xScale(a.key);\n        }).attr('width', xScale.bandwidth());\n        chart.selectAll('#limit').remove();\n        chart.selectAll('.divergence').remove();\n      }).style('fill', '#80cbc4'); // barGroups \n      //   .append('text')\n      //   .attr('class', 'value')\n      //   .attr('x', (a) => xScale(a.key) + xScale.bandwidth() / 2)\n      //   .attr('y', (a) => yScale(a.value))\n      //   .attr('text-anchor', 'middle')\n      //   .text((a) => `${a.value}`)\n\n      svg.append('text').attr('class', 'label').attr('x', -(height / 2) - margin).attr('y', margin / 2.4).attr('transform', 'rotate(-90)').attr('text-anchor', 'middle').text('Frequency');\n      svg.append('text').attr('class', 'title').attr('x', width / 2 + margin).attr('y', 40).attr('text-anchor', 'middle').text(title);\n    },\n    toggleOverviewPanel: function toggleOverviewPanel(focus) {\n      if (focus == \"entity\") {\n        var containerFocus = document.querySelector(\"#div_node_overview\");\n        var containerUnFocus = document.querySelector(\"#div_link_overview\");\n        containerFocus.style.border = \"2px solid green\";\n        containerUnFocus.style.border = \"None\";\n      } else {\n        var _containerFocus = document.querySelector(\"#div_link_overview\");\n\n        var _containerUnFocus = document.querySelector(\"#div_node_overview\");\n\n        _containerFocus.style.border = \"2px solid green\";\n        _containerUnFocus.style.border = \"None\";\n      }\n    },\n    retrieve_types_nodes: function retrieve_types_nodes() {\n      this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed);\n    }\n  },\n  watch: {\n    graphOverview: function graphOverview(newVal) {\n      var node_overview_data = this.graphOverview['data']['entity'];\n      var link_overview_data = this.graphOverview['data']['relationship'];\n      this.drawBarChart('#div_link_overview', link_overview_data, \"Link Overview\");\n      this.drawBarChart('#div_node_overview', node_overview_data, \"Node Overview\");\n    },\n    selectedColor: function selectedColor(newVal) {\n      var that = this;\n      d3.selectAll('.' + this.currentNodeForColorPicker).style('fill', function (d) {\n        d.selectedColor = newVal;\n        return newVal;\n      });\n      that.$store.dispatch('updateColorMapping', {\n        label: this.currentNodeForColorPicker,\n        color: newVal\n      });\n      console.log(d3.selectAll('.' + this.currentNodeForColorPicker));\n      console.log('.' + this.currentNodeForColorPicker);\n      console.log(newVal);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["props","data","brushed","showColorPickerMenu","arr","pickerX","pickerY","selectedColor","computed","OVERVIEW_HEIGHT","methods","getContainerX","title","getContainerY","drawBarChart","div","data_","console","attr","margin","range","domain","padding","scale","yScale","chart","call","xAxis","selectAll","style","d3","makeYLines","tickSize","tickFormat","enter","append","barGroups","xScale","on","that","selected_bar","transition","duration","y","width","svg","text","toggleOverviewPanel","focus","containerFocus","containerUnFocus","retrieve_types_nodes","watch","graphOverview","newVal","d","label","color"],"sourceRoot":"src/components","sources":["NodeRelOverview.vue"],"sourcesContent":["<template>\n    <v-container id=\"noderel\">\n        <v-row :style=\"{'height': 'OVERVIEW_HEIGHT', 'margin-top':'20px'}\">\n            <v-col cols=\"6\">\n                <div id=\"div_node_overview\"></div>\n            </v-col>\n            <v-col cols=\"6\">\n                <div id=\"div_link_overview\"></div>\n            </v-col>\n        </v-row>\n        <v-row\n          justify=\"center\"\n        >\n          <v-col\n            align-self=\"center\"\n            md=\"1\"\n          >\n          <v-tooltip bottom>\n              <template v-slot:activator=\"{ on, attrs }\">\n                <v-btn \n                  class=\"ma-2 menu-btn\"\n                  icon\n                  text\n                  @click=\"retrieve_types_nodes\"\n                >\n                  <v-icon\n                    v-bind=\"attrs\"\n                    v-on=\"on\"\n                  >\n                    mdi-feature-search-outline\n                  </v-icon>\n                </v-btn>\n              </template>\n              <span>Retrieve</span>\n            </v-tooltip>\n          </v-col>\n        </v-row>\n        <v-menu \n          v-model=\"showColorPickerMenu\"\n          absolute\n          class=\"colorPickerMenu\"\n          :position-x=\"pickerX\"\n          :position-y=\"pickerY\"\n        >\n         <v-color-picker\n                  class=\"ma-2\"\n                  show-swatches\n                  swatches-max-height=\"300px\"\n                  v-model=\"selectedColor\"\n          ></v-color-picker>\n        </v-menu>\n    </v-container>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport * as d3tip from '@/utils/d3-tip'\nexport default {\n    props: ['graphOverview'],\n    data(){\n      return {\n        brushed: {\"entity_type\": [], \"relationship_type\": []}, \n        showColorPickerMenu: false,\n        arr: [1,2,3], \n        pickerX: 0,\n        pickerY: 0, \n        selectedColor:'#80cbc4',\n      }\n    },\n    computed: {\n      OVERVIEW_HEIGHT(){\n        return window.innerHeight*0.3 + 'px'\n      }\n    }, \n    methods: { \n        getContainerX(title){\n          const container = document.querySelector(`.container_${title.split(' ').join('_')}`)\n          if (container!=null) {\n            \n            return container.getBoundingClientRect().x\n          }else {\n            return 0; \n          }\n        },\n        getContainerY(title){\n          const container = document.querySelector(`.container_${title.split(' ').join('_')}`)\n          if (container!=null) {\n            return container.getBoundingClientRect().y\n          }else {\n            return 0; \n          }\n        },\n        drawBarChart(div, data_, title){\n        // clean the data\n            let that = this\n            var data = []\n            const keys = Object.keys(data_);\n        \n            for(var i=0;i<keys.length;i++){\n                data.push({'key':keys[i],'value':data_[keys[i]]})\n                }\n\n            data.sort((a, b) => a.value - b.value);\n            data.reverse();\n            console.log(\"data\",data)\n\n          var svg = d3.select(div).append(\"svg\").attr('class', `container_${title.split(' ').join('_')}`);\n          \n          const margin = 80;\n          const width = 500 - 2 * margin;\n          const height = 400 - 2 * margin;\n\n          var selected_bar = []\n          const chart = svg.append('g')\n            .attr('transform', `translate(${margin}, ${margin})`);\n\n          const xScale = d3.scaleBand()\n            .range([0, width])\n            .domain(data.map((s) => s.key))\n            .padding(0.1)\n          \n          const yScale = d3.scaleLinear()\n            .range([height, 0])\n            .domain([0, d3.max(data, function(d) { return d.value; })]);\n\n          const makeYLines = () => d3.axisLeft()\n            .scale(yScale)\n\n          var xAxis = d3.axisBottom(xScale).tickSize(0)\n\n          chart.append('g')\n          .attr(\"class\", \"axis axis--x\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(xAxis)\n          .selectAll(\"text\")  \n          .style(\"text-anchor\", \"start\")\n          .attr(\"dx\", \"-7em\")\n          .attr(\"dy\", \"+.1em\")\n          .attr(\"transform\", \"rotate(-80)\" )\n          .style(\"font-size\", \"10px\");\n\n          chart.append('g')\n            .call(d3.axisLeft(yScale));\n\n          chart.append('g')\n            .attr('class', 'grid')\n            .call(makeYLines()\n              .tickSize(-width, 0, 0)\n              .tickFormat('')\n            )\n\n          const barGroups = chart.selectAll()\n            .data(data)\n            .enter()\n            .append('g')\n\n          barGroups\n            .append('rect')\n            .attr('class', d=>`bar nodetype_${d.key?d.key:'undefined'}`)\n            .attr('x', (g) => xScale(g.key))\n            .attr('y', (g) => yScale(g.value))\n            .attr('height', (g) => height - yScale(g.value))\n            .attr('width', xScale.bandwidth())\n            .on('contextmenu', function(d, i) {\n              const coordinates = d3.mouse(this)\n              that.pickerX = that.getContainerX(title) + coordinates[0]\n              that.pickerY = that.getContainerY(title) + coordinates[1]\n              d3.event.preventDefault()\n              that.currentNodeForColorPicker = `nodetype_${d.key?d.key:'undefined'}`\n              if (d.selectedColor == null) {\n                that.selectedColor = '#80cbc4'\n              }else {\n                that.selectedColor = d.selectedColor\n              }\n              that.showColorPickerMenu = true\n            })\n            .on('click', function(actual,i){ \n\n              if (selected_bar.includes(actual.key)){\n                selected_bar = selected_bar.filter(function(item) {return item !== actual.key})\n                d3.select(this).attr(\"stroke\",'none')\n              }else{\n                selected_bar.push(actual.key)\n                d3.select(this).attr(\"stroke\",'grey')\n                d3.select(this).attr(\"stroke-width\",'2px')\n              }\n              \n              if (title == \"Link Overview\") {\n                that.brushed.relationship_type = selected_bar\n              }else {\n                that.brushed.entity_type = selected_bar\n              } \n            })\n            .on('mouseenter', function (actual, i) {\n            d3.selectAll('.value')\n                .attr('opacity', 0)\n\n            d3.select(this)\n              .transition()\n              .duration(300)\n              .attr('opacity', 0.6)\n              .attr('x', (a) => xScale(a.key) - 5)\n              .attr('width', xScale.bandwidth() + 10)\n\n            const y = yScale(actual.value);\n\n            let line = chart.append('line')\n                .attr('id', 'limit')\n                .attr('x1', 0)\n                .attr('y1', y)\n                .attr('x2', width)\n                .attr('y2', y)\n\n            })\n            .on('mouseleave', function () {\n              d3.selectAll('.value')\n                .attr('opacity', 1)\n\n              d3.select(this)\n                .transition()\n                .duration(300)\n                .attr('opacity', 1)\n                .attr('x', (a) => xScale(a.key))\n                .attr('width', xScale.bandwidth())\n\n              chart.selectAll('#limit').remove()\n              chart.selectAll('.divergence').remove()\n            })\n            .style('fill', '#80cbc4')\n\n          // barGroups \n          //   .append('text')\n          //   .attr('class', 'value')\n          //   .attr('x', (a) => xScale(a.key) + xScale.bandwidth() / 2)\n          //   .attr('y', (a) => yScale(a.value))\n          //   .attr('text-anchor', 'middle')\n          //   .text((a) => `${a.value}`)\n          \n          svg.append('text')\n            .attr('class', 'label')\n            .attr('x', -(height / 2) - margin)\n            .attr('y', margin / 2.4)\n            .attr('transform', 'rotate(-90)')\n            .attr('text-anchor', 'middle')\n            .text('Frequency')\n\n          svg.append('text')\n            .attr('class', 'title')\n            .attr('x', width / 2 + margin)\n            .attr('y', 40)\n            .attr('text-anchor', 'middle')\n            .text(title)\n        },\n        toggleOverviewPanel(focus){\n          if (focus == \"entity\") {\n            const containerFocus = document.querySelector(\"#div_node_overview\")\n            const containerUnFocus = document.querySelector(\"#div_link_overview\")\n            containerFocus.style.border = \"2px solid green\"\n            containerUnFocus.style.border = \"None\"\n          } else{\n            const containerFocus = document.querySelector(\"#div_link_overview\")\n            const containerUnFocus = document.querySelector(\"#div_node_overview\")\n            containerFocus.style.border = \"2px solid green\"\n            containerUnFocus.style.border = \"None\"\n          }\n        },\n        retrieve_types_nodes(){\n          this.$store.dispatch(\"retrieveNodesLinksWithTypes\", this.brushed)\n        }\n    },\n    watch: { \n        graphOverview(newVal) {\n            var node_overview_data = this.graphOverview['data']['entity']\n            var link_overview_data = this.graphOverview['data']['relationship']\n            this.drawBarChart('#div_link_overview', link_overview_data,\"Link Overview\")\n            this.drawBarChart('#div_node_overview', node_overview_data, \"Node Overview\")\n        },\n        selectedColor(newVal) {\n          const that = this\n          d3.selectAll('.'+this.currentNodeForColorPicker).style('fill', d=>{\n            d.selectedColor = newVal\n            return newVal\n          })\n          that.$store.dispatch('updateColorMapping', {label: this.currentNodeForColorPicker, color:newVal})\n          console.log(d3.selectAll('.'+this.currentNodeForColorPicker))\n          console.log('.'+this.currentNodeForColorPicker)\n          console.log(newVal)\n        }\n    }\n}\n</script>\n\n<style>\n\nbody {\n  font-family: 'Open Sans', sans-serif;\n}\n\ndiv#layout {\n  text-align: center;\n}\n\ndiv#div_node_overview {\n  width: 500px;\n  height: 400px;\n  margin-right: 1em;\n}\ndiv#div_link_overview {\n  width: 500px;\n  height: 400px;\n  margin-left: 1em;}\n\n#noderel svg {\n  width: 100%;\n  height: 100%;\n}\n\n\ntext {\n  font-size: 12px;\n  fill: #000;\n}\n\n/* path {\n  stroke: gray;\n} */\n\nline {\n  stroke: gray;\n}\n\nline#limit {\n  stroke: #FED966;\n  stroke-width: 3;\n  stroke-dasharray: 3 6;\n}\n\n.grid path {\n  stroke-width: 0;\n}\n\n.grid .tick line {\n  stroke: #9FAAAE;\n  stroke-opacity: 0.3;\n}\n\ntext.divergence {\n  font-size: 14px;\n  fill: #2F4A6D;\n}\n\ntext.value {\n  font-size: 14px;\n}\n\ntext.title {\n  font-size: 22px;\n  font-weight: 600;\n}\n\ntext.label {\n  font-size: 14px;\n  font-weight: 400;\n}\n\ntext.source {\n  font-size: 10px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}