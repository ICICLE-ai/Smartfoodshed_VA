{"ast":null,"code":"import _objectSpread from \"/Users/yameitu/Desktop/ICIRCLE/Smartfoodshed_VA_VC1/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nexport default {\n  data: function data() {\n    return {\n      search: '',\n      calories: '',\n      desserts: [],\n      headers: [],\n      selected_rows: [],\n      singleSelect: false,\n      sheetNames: [],\n      tab: null,\n      sheetItemKey: null,\n      currentSheet: null,\n      currentData: null,\n      height: 1000\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(['tableData', 'tableSelection', 'tableSelected', 'tableInteractiveMode', 'interactiveTableData', 'tableContainer'])), {}, {\n    windowHeight: function windowHeight() {\n      return window.innerHeight - 350 + \"px\";\n    }\n  }),\n  beforeCreate: function beforeCreate() {\n    this.height = this.tableContainer.height;\n    console.log(this.height);\n  },\n  created: function created() {\n    this.$store.dispatch('getTableData');\n    this.height = this.tableContainer.height;\n  },\n  methods: {\n    filterOnlyCapsText: function filterOnlyCapsText(value, search, item) {\n      console.log(value, search, item);\n      return value != null && search != null && typeof value === 'string' && value.toString().indexOf(search) !== -1;\n    },\n    convert: function convert(raw) {\n      // vuetify need the text + value, not label+value \n      var newOutput = [];\n      raw.forEach(function (d) {\n        var temp = {\n          text: d['label'],\n          value: d['value']\n        };\n        newOutput.push(temp);\n      });\n      return newOutput;\n    },\n    itemSelectedHandler: function itemSelectedHandler(_ref) {\n      var item = _ref.item,\n          value = _ref.value;\n\n      if (value) {\n        this.$store.dispatch('setTableSelected', {\n          action: 'add',\n          sheetName: this.currentSheet,\n          value: [item]\n        });\n      } else {\n        this.$store.dispatch('setTableSelected', {\n          action: 'remove',\n          sheetName: this.currentSheet,\n          value: [item]\n        });\n      }\n    },\n    retrieveGraphFromTableHandler: function retrieveGraphFromTableHandler() {\n      this.$store.dispatch(\"retrieveGraphFromTable\");\n    },\n    selectAllHandler: function selectAllHandler(_ref2) {\n      var items = _ref2.items,\n          value = _ref2.value;\n      console.log(items, value);\n\n      if (value) {\n        this.$store.dispatch('setTableSelected', {\n          action: 'add',\n          sheetName: this.currentSheet,\n          value: items\n        });\n      } else {\n        this.$store.dispatch('setTableSelected', {\n          action: 'remove',\n          sheetName: this.currentSheet,\n          value: items\n        });\n      }\n    },\n    updateItemKey: function updateItemKey() {\n      this.currentSheet = this.currentData['sheet'][this.tab];\n\n      if (this.currentSheet == null) {\n        return;\n      }\n\n      var sampleData = this.currentData['data'][this.currentSheet]['tableData'][0];\n\n      if (sampleData) {\n        var keys = Object.keys(sampleData);\n        console.log(\"check =================== here!!!\");\n        console.log(sampleData);\n        console.log(this.currentSheet);\n\n        if (keys.includes('relation_id')) {\n          this.sheetItemKey = 'relation_id';\n        } else if (keys.includes('id')) {\n          this.sheetItemKey = 'id';\n        }\n      }\n    }\n  },\n  watch: {\n    tableData: function tableData() {\n      if (!this.tableInteractiveMode) {\n        this.sheetNames = this.tableData['sheet'];\n        console.log(\"check here!!!\");\n        console.log(this.tableData);\n        this.currentData = this.tableData;\n\n        if (this.tab == null) {\n          this.tab = 0;\n        }\n\n        this.updateItemKey();\n      }\n    },\n    tableInteractiveMode: function tableInteractiveMode() {\n      if (!this.tableInteractiveMode) {\n        this.currentData = this.tableData;\n        this.sheetNames = this.currentData['sheet'];\n\n        if (this.tab == null) {\n          this.tab = 0;\n        }\n\n        this.updateItemKey();\n        this.selected_rows = [];\n      }\n    },\n    interactiveTableData: function interactiveTableData() {\n      console.log(this.interactiveTableData);\n\n      if (this.tableInteractiveMode) {\n        if (this.interactiveTableData['sheet'].length > 0) {\n          this.currentData = this.interactiveTableData;\n          this.sheetNames = this.currentData['sheet']; // console.log(\"**********************\")\n          // console.log(this.interactiveTableData)\n\n          if (this.tab == null) {\n            this.tab = 0;\n          }\n\n          this.updateItemKey();\n          this.selected_rows = [];\n        } else {\n          alert(\"Nothing retrieved from table!\");\n          this.selected_rows = [];\n        }\n      }\n    },\n    tab: function tab() {\n      // tab id\n      // const tabId = this.tab\n      console.log(this.currentData);\n\n      if (this.currentData != null) {\n        this.updateItemKey();\n      }\n\n      console.log(this.sheetItemKey);\n    },\n    'tableContainer.height': function tableContainerHeight(newVal, oldVal) {\n      console.log(this.height);\n      this.height = this.tableContainer.height;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AACA;AACAA,MADA,kBACA;AACA;AACAC,gBADA;AAEAC,kBAFA;AAGAC,kBAHA;AAIAC,iBAJA;AAMAC,uBANA;AAOAC,yBAPA;AAQAC,oBARA;AASAC,eATA;AAUAC,wBAVA;AAWAC,wBAXA;AAYAC,uBAZA;AAaAC;AAbA;AAeA,GAjBA;AAkBAC,4CACAC,4HADA;AAEAC,gBAFA,0BAEA;AACA;AACA;AAJA,IAlBA;AAwBAC,cAxBA,0BAwBA;AACA;AACAC;AACA,GA3BA;AA4BAC,SA5BA,qBA4BA;AACA;AACA;AAEA,GAhCA;AAiCAC;AACAC,sBADA,8BACAC,KADA,EACApB,MADA,EACAqB,IADA,EACA;AACAL;AACA,8BACAhB,cADA,IAEA,yBAFA,IAGAoB,uCAHA;AAIA,KAPA;AAQAE,WARA,mBAQAC,GARA,EAQA;AACA;AACA;AACAA;AACA;AACAC,0BADA;AAEAJ;AAFA;AAIAK;AACA,OANA;AAOA;AACA,KAnBA;AAoBAC,uBApBA,qCAoBA;AAAA;AAAA;;AAEA;AACA;AAAAC;AAAAC;AAAAR;AAAA;AACA,OAFA,MAEA;AACA;AAAAO;AAAAC;AAAAR;AAAA;AACA;AACA,KA3BA;AA4BAS,iCA5BA,2CA4BA;AACA;AACA,KA9BA;AA+BAC,oBA/BA,mCA+BA;AAAA;AAAA;AACAd;;AACA;AACA;AAAAW;AAAAC;AAAAR;AAAA;AACA,OAFA,MAEA;AACA;AAAAO;AAAAC;AAAAR;AAAA;AACA;AACA,KAtCA;AAuCAW,iBAvCA,2BAuCA;AACA;;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACAf;AACAA;AACAA;;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA;AACA;AAzDA,GAjCA;AA4FAgB;AACAC,aADA,uBACA;AACA;AACA;AACAjB;AACAA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,KAZA;AAaAkB,wBAbA,kCAaA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,KAvBA;AAwBAC,wBAxBA,kCAwBA;AACAnB;;AACA;AACA;AACA;AACA,sDAFA,CAGA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,SAVA,MAUA;AACAoB;AACA;AACA;AACA;AACA,KA1CA;AA2CA7B,OA3CA,iBA2CA;AACA;AACA;AACAS;;AACA;AACA;AACA;;AACAA;AACA,KAnDA;AAoDA;AACAA;AACA;AACA;AAvDA;AA5FA","names":["data","search","calories","desserts","headers","selected_rows","singleSelect","sheetNames","tab","sheetItemKey","currentSheet","currentData","height","computed","mapState","windowHeight","beforeCreate","console","created","methods","filterOnlyCapsText","value","item","convert","raw","text","newOutput","itemSelectedHandler","action","sheetName","retrieveGraphFromTableHandler","selectAllHandler","updateItemKey","watch","tableData","tableInteractiveMode","interactiveTableData","alert"],"sourceRoot":"src/components/tableview","sources":["TableViewerCore.vue"],"sourcesContent":["<template>\n<v-container id=\"inspire\">\n    <div class=\"tmp\">\n      <v-tabs v-model=\"tab\">\n        <v-tab\n          v-for=\"sheetname in sheetNames\"\n          :key=\"sheetname\"\n        >\n          {{ sheetname }}\n        </v-tab>\n      </v-tabs>\n      <v-tabs-items v-model=\"tab\" ref=\"tabletabs\">\n        <v-tab-item\n          v-for=\"sheetname in sheetNames\"\n          :key=\"sheetname\"\n        >\n            <v-data-table\n                :height=\"`${height-50-70-170}px`\"\n                v-model=\"selected_rows\"\n                show-select\n                :headers=\"convert(currentData['data'][sheetname]['tableInfo'])\"\n                :items=\"currentData['data'][sheetname]['tableData']\"\n                :item-key=\"sheetItemKey\"\n                :single-select=\"singleSelect\"\n                class=\"elevation-1\"\n                :search=\"search\"\n                :custom-filter=\"filterOnlyCapsText\"\n                @item-selected=\"itemSelectedHandler\"\n                @toggle-select-all=\"selectAllHandler\"\n            >\n                <template v-slot:top>\n                  <v-text-field\n                      v-model=\"search\"\n                      label=\"Search (UPPER CASE ONLY)\"\n                      class=\"mx-4\"\n                      style=\"margin-top: 3px\"\n                  ></v-text-field>\n                </template>\n                <template v-slot:footer>\n                  <v-container>\n                    <v-row\n                      justify=\"space-between\"\n                    >\n                      <v-col cols=\"3\">\n                        <v-text-field\n                          v-model=\"calories\"\n                          type=\"number\"\n                          label=\"Less than\"  \n                          style=\"width: 80px\"\n\n                      ></v-text-field>\n                      </v-col>\n                      <v-col cols=\"3\" style=\"margin-top:20px\">\n                          <v-btn @click=\"retrieveGraphFromTableHandler\">\n                          Retrieve\n                        </v-btn>\n                      </v-col>\n                    </v-row>\n                  </v-container>\n                </template>\n            </v-data-table>\n        </v-tab-item>\n      </v-tabs-items>\n    \n    </div>\n</v-container> \n</template>\n\n<script>\nimport {mapState} from 'vuex'\nexport default{\n    data () {\n    return {\n      search: '',\n      calories: '',\n      desserts: [],\n      headers:[],\n\n      selected_rows:[],\n      singleSelect: false,\n      sheetNames: [],\n      tab: null,\n      sheetItemKey: null, \n      currentSheet: null, \n      currentData: null,\n      height: 1000,  \n    }\n  },\n  computed: {\n    ...mapState(['tableData', 'tableSelection', 'tableSelected', 'tableInteractiveMode', 'interactiveTableData', 'tableContainer']),\n    windowHeight() {\n      return (window.innerHeight-350) + \"px\"\n    }\n  },\n  beforeCreate() {\n    this.height = this.tableContainer.height \n    console.log(this.height)\n  },\n  created(){\n    this.$store.dispatch('getTableData')\n    this.height = this.tableContainer.height \n    \n  },\n  methods: {\n    filterOnlyCapsText (value, search, item) {\n      console.log(value, search, item)\n      return value != null &&\n        search != null &&\n        typeof value === 'string' &&\n        value.toString().indexOf(search) !== -1\n    },\n    convert(raw){\n      // vuetify need the text + value, not label+value \n      let newOutput = []\n      raw.forEach(d=>{\n        let temp = {\n          text: d['label'],\n          value: d['value'],\n        }\n        newOutput.push(temp)\n      })\n      return newOutput\n    }, \n    itemSelectedHandler({item, value}){\n      \n      if (value) {\n        this.$store.dispatch('setTableSelected', {action: 'add', sheetName: this.currentSheet, value: [item]})\n      } else {\n        this.$store.dispatch('setTableSelected', {action: 'remove', sheetName: this.currentSheet, value: [item]})\n      }\n    }, \n    retrieveGraphFromTableHandler(){ \n      this.$store.dispatch(\"retrieveGraphFromTable\")\n    }, \n    selectAllHandler({items, value}){\n      console.log(items, value)\n      if (value) {\n        this.$store.dispatch('setTableSelected', {action: 'add', sheetName: this.currentSheet, value: items})\n      } else {\n        this.$store.dispatch('setTableSelected', {action: 'remove', sheetName: this.currentSheet, value: items})\n      }\n    },\n    updateItemKey(){\n      this.currentSheet = this.currentData['sheet'][this.tab]\n      if (this.currentSheet == null){\n        return \n      }\n      const sampleData = this.currentData['data'][this.currentSheet]['tableData'][0]; \n\n      if(sampleData){\n        const keys = Object.keys(sampleData)\n        console.log(\"check =================== here!!!\")\n        console.log(sampleData)\n        console.log(this.currentSheet)\n        if(keys.includes('relation_id')){\n          this.sheetItemKey = 'relation_id'\n        }else if(keys.includes('id')){\n          this.sheetItemKey = 'id'\n        }\n      }\n    }\n  },\n  watch:{\n    tableData () {\n      if (!this.tableInteractiveMode) {\n        this.sheetNames = this.tableData['sheet']\n        console.log(\"check here!!!\")\n        console.log(this.tableData)\n        this.currentData = this.tableData\n        if(this.tab==null){\n          this.tab = 0\n        } \n        this.updateItemKey()\n      }\n    },\n    tableInteractiveMode(){\n      if(!this.tableInteractiveMode){\n        this.currentData = this.tableData\n        this.sheetNames = this.currentData['sheet'] \n        if(this.tab==null){\n              this.tab = 0\n        } \n        this.updateItemKey()\n        this.selected_rows = []\n      }   \n    },\n    interactiveTableData(){\n      console.log(this.interactiveTableData)\n      if(this.tableInteractiveMode){\n        if(this.interactiveTableData['sheet'].length > 0){\n          this.currentData = this.interactiveTableData\n          this.sheetNames = this.currentData['sheet']\n          // console.log(\"**********************\")\n          // console.log(this.interactiveTableData)\n          if(this.tab==null){\n              this.tab = 0\n            } \n          this.updateItemKey()\n          this.selected_rows = []\n        }else{\n          alert(\"Nothing retrieved from table!\")\n          this.selected_rows = []\n        }\n      }\n    },\n    tab() {\n      // tab id\n      // const tabId = this.tab\n      console.log(this.currentData)\n      if (this.currentData != null) {\n        this.updateItemKey()\n      }\n      console.log(this.sheetItemKey)\n    }, \n    'tableContainer.height': function (newVal, oldVal) {\n        console.log(this.height)\n        this.height = this.tableContainer.height\n    }\n  }, \n  \n}\n\n</script>\n<style>\n.v-input__slot{\n  width: 100px;\n}\n\n#inspire{\n  height: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module"}